---Constraint solving at [/Users/amritpankaur/test.swift:55:1 - line:55:11]---
---Initial constraints for the given expression---
(binary_expr type='$T6' location=/Users/amritpankaur/test.swift:55:9 range=[/Users/amritpankaur/test.swift:55:1 - line:55:11]
  (overloaded_decl_ref_expr type='$T0' location=/Users/amritpankaur/test.swift:55:9 range=[/Users/amritpankaur/test.swift:55:9 - line:55:9] name=+ number_of_decls=31 function_ref=single decls=[
    Swift.(file).String extension.+,
    Swift.(file).Float16 extension.+,
    Swift.(file).Float extension.+,
    Swift.(file).Double extension.+,
    Swift.(file).UInt8 extension.+,
    Swift.(file).Int8 extension.+,
    Swift.(file).UInt16 extension.+,
    Swift.(file).Int16 extension.+,
    Swift.(file).UInt32 extension.+,
    Swift.(file).Int32 extension.+,
    Swift.(file).UInt64 extension.+,
    Swift.(file).Int64 extension.+,
    Swift.(file).UInt extension.+,
    Swift.(file).Int extension.+,
    Swift.(file).Array extension.+,
    Swift.(file).FloatingPoint.+,
    Swift.(file).AdditiveArithmetic.+,
    Swift.(file).BinaryInteger.+,
    Swift.(file).Strideable extension.+,
    Swift.(file).Strideable extension.+,
    Swift.(file).Sequence extension.+,
    Swift.(file).Sequence extension.+,
    Swift.(file).SIMD extension.+,
    Swift.(file).SIMD extension.+,
    Swift.(file).SIMD extension.+,
    Swift.(file).SIMD extension.+,
    Swift.(file).SIMD extension.+,
    Swift.(file).SIMD extension.+,
    Swift.(file).RangeReplaceableCollection extension.+,
    Swift.(file).RangeReplaceableCollection extension.+,
    Swift.(file).RangeReplaceableCollection extension.+])
  (argument_list implicit
    (argument
      (binary_expr type='$T4' location=/Users/amritpankaur/test.swift:55:3 range=[/Users/amritpankaur/test.swift:55:1 - line:55:5]
        (overloaded_decl_ref_expr type='$T1' location=/Users/amritpankaur/test.swift:55:3 range=[/Users/amritpankaur/test.swift:55:3 - line:55:3] name=+ number_of_decls=31 function_ref=single decls=[
          Swift.(file).String extension.+,
          Swift.(file).Float16 extension.+,
          Swift.(file).Float extension.+,
          Swift.(file).Double extension.+,
          Swift.(file).UInt8 extension.+,
          Swift.(file).Int8 extension.+,
          Swift.(file).UInt16 extension.+,
          Swift.(file).Int16 extension.+,
          Swift.(file).UInt32 extension.+,
          Swift.(file).Int32 extension.+,
          Swift.(file).UInt64 extension.+,
          Swift.(file).Int64 extension.+,
          Swift.(file).UInt extension.+,
          Swift.(file).Int extension.+,
          Swift.(file).Array extension.+,
          Swift.(file).FloatingPoint.+,
          Swift.(file).AdditiveArithmetic.+,
          Swift.(file).BinaryInteger.+,
          Swift.(file).Strideable extension.+,
          Swift.(file).Strideable extension.+,
          Swift.(file).Sequence extension.+,
          Swift.(file).Sequence extension.+,
          Swift.(file).SIMD extension.+,
          Swift.(file).SIMD extension.+,
          Swift.(file).SIMD extension.+,
          Swift.(file).SIMD extension.+,
          Swift.(file).SIMD extension.+,
          Swift.(file).SIMD extension.+,
          Swift.(file).RangeReplaceableCollection extension.+,
          Swift.(file).RangeReplaceableCollection extension.+,
          Swift.(file).RangeReplaceableCollection extension.+])
        (argument_list implicit
          (argument
            (integer_literal_expr type='$T2' location=/Users/amritpankaur/test.swift:55:1 range=[/Users/amritpankaur/test.swift:55:1 - line:55:1] value=1 builtin_initializer=**NULL** initializer=**NULL**))
          (argument
            (string_literal_expr type='$T3' location=/Users/amritpankaur/test.swift:55:5 range=[/Users/amritpankaur/test.swift:55:5 - line:55:5] encoding=utf8 value="a" builtin_initializer=**NULL** initializer=**NULL**))
        )))
    (argument
      (integer_literal_expr type='$T5' location=/Users/amritpankaur/test.swift:55:11 range=[/Users/amritpankaur/test.swift:55:11 - line:55:11] value=2 builtin_initializer=**NULL** initializer=**NULL**))
  ))
Score: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Contextual Type: <null>
Type Variables:
  $T0 [lvalue allowed] [noescape allowed] delayed bindings={} @ locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]
  $T1 [lvalue allowed] [noescape allowed] delayed bindings={} @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]
  $T2 [noescape allowed] delayed literal=3 bindings={} @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 [noescape allowed] delayed literal=3 bindings={} @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T4 [noescape allowed] delayed bindings={} @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T5 [noescape allowed] delayed literal=3 bindings={} @ locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]
  $T6 [noescape allowed] delayed bindings={} @ locator@0x1258f2c80 [Binary@/Users/amritpankaur/test.swift:55:9 -> function result]

Active Constraints:

Inactive Constraints:
  disjunction [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]]:
>             $T0 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>  [favored]  $T0 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
>             $T0 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
  disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
  $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
  ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
  $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
  ($T4, $T5) -> $T6 applicable fn $T0 [[locator@0x1258f2d40 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply function]]];
  ($T2 delayed literal=3 bindings={})
  ($T3 delayed literal=3 bindings={})
  ($T5 delayed literal=3 bindings={})
  (attempting disjunction choice $T0 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Int, Int) -> Int)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Int [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Int})
      Initial bindings: $T5 := Int
      (attempting type variable $T5 := Int
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Int})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T7, $T7) -> $T7)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T2 bindings={(subtypes of) Int})
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T2 := Int
          (attempting type variable $T2 := Int
            ($T3 literal=3 bindings={(subtypes of) Int})
            Initial bindings: $T3 := Int, $T3 := String
            (attempting type variable $T3 := Int
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T8, $T8.Stride) -> $T8)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (failed constraint $T8 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T9.Stride, $T9) -> $T9)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T9 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T10, $T10) -> $T10)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T10 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T11, $T11) -> $T11)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T2 bindings={(subtypes of) Int})
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T2 := Int
          (attempting type variable $T2 := Int
            ($T3 literal=3 bindings={(subtypes of) Int})
            Initial bindings: $T3 := Int, $T3 := String
            (attempting type variable $T3 := Int
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T12>, Array<$T12>) -> Array<$T12>)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T13, $T14) -> $T13)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T14] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (failed constraint $T13 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T16, $T15) -> $T15)
        ($T2 literal=3 involves_type_vars=[$T16] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T15 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T17, $T18) -> $T17)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T18] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (failed constraint $T17 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T19, $T19) -> $T19)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T20.Scalar, $T20) -> $T20)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T21, $T21.Scalar) -> $T21)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (String, String) -> String)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv String [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv String [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 literal=3 bindings={(subtypes of) String})
      Initial bindings: $T5 := String, $T5 := Int
      (attempting type variable $T5 := String
        (increasing score due to non-default literal)
        (failed constraint $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];)
      )
      (attempting type variable $T5 := Int
        (failed constraint $T5 operator arg conv String [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
      )
      (attempting type variable $T5 := Double
        (increasing score due to non-default literal)
        (failed constraint $T5 operator arg conv String [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
      )
    failed component #1)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Float16, Float16) -> Float16)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Float16 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Float16})
      Initial bindings: $T5 := Float16
      (attempting type variable $T5 := Float16
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Float16})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T22, $T22) -> $T22)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          ($T2 bindings={(subtypes of) Float16})
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T2 := Float16
          (attempting type variable $T2 := Float16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Float16})
            Initial bindings: $T3 := Float16, $T3 := String
            (attempting type variable $T3 := Float16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T23, $T23.Stride) -> $T23)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16
        (attempting type variable $T4 := Float16
          (failed constraint $T23 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T24.Stride, $T24) -> $T24)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (failed constraint $T24 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T25, $T25) -> $T25)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          ($T2 bindings={(subtypes of) Float16})
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T2 := Float16
          (attempting type variable $T2 := Float16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Float16})
            Initial bindings: $T3 := Float16, $T3 := String
            (attempting type variable $T3 := Float16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T26, $T26) -> $T26)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (failed constraint $T26 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T27>, Array<$T27>) -> Array<$T27>)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T28, $T29) -> $T28)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T29] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16
        (attempting type variable $T4 := Float16
          (failed constraint $T28 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T31, $T30) -> $T30)
        ($T2 literal=3 involves_type_vars=[$T31] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (failed constraint $T30 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T32, $T33) -> $T32)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T33] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16
        (attempting type variable $T4 := Float16
          (failed constraint $T32 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T34, $T34) -> $T34)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T35.Scalar, $T35) -> $T35)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T36, $T36.Scalar) -> $T36)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16
        (attempting type variable $T4 := Float16
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Float, Float) -> Float)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Float [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Float})
      Initial bindings: $T5 := Float
      (attempting type variable $T5 := Float
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Float})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T37, $T37) -> $T37)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          ($T2 bindings={(subtypes of) Float})
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T2 := Float
          (attempting type variable $T2 := Float
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Float})
            Initial bindings: $T3 := Float, $T3 := String
            (attempting type variable $T3 := Float
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T38, $T38.Stride) -> $T38)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float
        (attempting type variable $T4 := Float
          (failed constraint $T38 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T39.Stride, $T39) -> $T39)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (failed constraint $T39 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T40, $T40) -> $T40)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          ($T2 bindings={(subtypes of) Float})
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T2 := Float
          (attempting type variable $T2 := Float
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Float})
            Initial bindings: $T3 := Float, $T3 := String
            (attempting type variable $T3 := Float
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T41, $T41) -> $T41)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (failed constraint $T41 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T42>, Array<$T42>) -> Array<$T42>)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T43, $T44) -> $T43)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T44] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float
        (attempting type variable $T4 := Float
          (failed constraint $T43 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T46, $T45) -> $T45)
        ($T2 literal=3 involves_type_vars=[$T46] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (failed constraint $T45 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T47, $T48) -> $T47)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T48] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float
        (attempting type variable $T4 := Float
          (failed constraint $T47 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T49, $T49) -> $T49)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T50.Scalar, $T50) -> $T50)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T51, $T51.Scalar) -> $T51)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float
        (attempting type variable $T4 := Float
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Double, Double) -> Double)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Double [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Double})
      Initial bindings: $T5 := Double
      (attempting type variable $T5 := Double
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Double})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T52, $T52) -> $T52)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T2 bindings={(subtypes of) Double})
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T2 := Double
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Double})
            Initial bindings: $T3 := Double, $T3 := String
            (attempting type variable $T3 := Double
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T53, $T53.Stride) -> $T53)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (failed constraint $T53 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T54.Stride, $T54) -> $T54)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T54 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T55, $T55) -> $T55)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T2 bindings={(subtypes of) Double})
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T2 := Double
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Double})
            Initial bindings: $T3 := Double, $T3 := String
            (attempting type variable $T3 := Double
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T56, $T56) -> $T56)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T56 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T57>, Array<$T57>) -> Array<$T57>)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T58, $T59) -> $T58)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T59] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (failed constraint $T58 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T61, $T60) -> $T60)
        ($T2 literal=3 involves_type_vars=[$T61] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T60 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T62, $T63) -> $T62)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T63] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (failed constraint $T62 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T64, $T64) -> $T64)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T65.Scalar, $T65) -> $T65)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T66, $T66.Scalar) -> $T66)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (UInt8, UInt8) -> UInt8)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv UInt8 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) UInt8})
      Initial bindings: $T5 := UInt8
      (attempting type variable $T5 := UInt8
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) UInt8})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T67, $T67) -> $T67)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          ($T2 bindings={(subtypes of) UInt8})
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T2 := UInt8
          (attempting type variable $T2 := UInt8
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt8})
            Initial bindings: $T3 := UInt8, $T3 := String
            (attempting type variable $T3 := UInt8
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T68, $T68.Stride) -> $T68)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8
        (attempting type variable $T4 := UInt8
          (failed constraint $T68 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T69.Stride, $T69) -> $T69)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (failed constraint $T69 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T70, $T70) -> $T70)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (failed constraint $T70 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T71, $T71) -> $T71)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          ($T2 bindings={(subtypes of) UInt8})
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T2 := UInt8
          (attempting type variable $T2 := UInt8
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt8})
            Initial bindings: $T3 := UInt8, $T3 := String
            (attempting type variable $T3 := UInt8
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T72>, Array<$T72>) -> Array<$T72>)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T73, $T74) -> $T73)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T74] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8
        (attempting type variable $T4 := UInt8
          (failed constraint $T73 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T76, $T75) -> $T75)
        ($T2 literal=3 involves_type_vars=[$T76] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (failed constraint $T75 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T77, $T78) -> $T77)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T78] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8
        (attempting type variable $T4 := UInt8
          (failed constraint $T77 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T79, $T79) -> $T79)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T80.Scalar, $T80) -> $T80)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T81, $T81.Scalar) -> $T81)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8
        (attempting type variable $T4 := UInt8
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Int8, Int8) -> Int8)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Int8 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Int8})
      Initial bindings: $T5 := Int8
      (attempting type variable $T5 := Int8
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Int8})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T82, $T82) -> $T82)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          ($T2 bindings={(subtypes of) Int8})
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T2 := Int8
          (attempting type variable $T2 := Int8
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int8})
            Initial bindings: $T3 := Int8, $T3 := String
            (attempting type variable $T3 := Int8
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T83, $T83.Stride) -> $T83)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8
        (attempting type variable $T4 := Int8
          (failed constraint $T83 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T84.Stride, $T84) -> $T84)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (failed constraint $T84 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T85, $T85) -> $T85)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (failed constraint $T85 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T86, $T86) -> $T86)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          ($T2 bindings={(subtypes of) Int8})
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T2 := Int8
          (attempting type variable $T2 := Int8
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int8})
            Initial bindings: $T3 := Int8, $T3 := String
            (attempting type variable $T3 := Int8
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T87>, Array<$T87>) -> Array<$T87>)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T88, $T89) -> $T88)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T89] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8
        (attempting type variable $T4 := Int8
          (failed constraint $T88 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T91, $T90) -> $T90)
        ($T2 literal=3 involves_type_vars=[$T91] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (failed constraint $T90 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T92, $T93) -> $T92)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T93] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8
        (attempting type variable $T4 := Int8
          (failed constraint $T92 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T94, $T94) -> $T94)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T95.Scalar, $T95) -> $T95)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T96, $T96.Scalar) -> $T96)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8
        (attempting type variable $T4 := Int8
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (UInt16, UInt16) -> UInt16)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv UInt16 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) UInt16})
      Initial bindings: $T5 := UInt16
      (attempting type variable $T5 := UInt16
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) UInt16})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T97, $T97) -> $T97)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          ($T2 bindings={(subtypes of) UInt16})
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T2 := UInt16
          (attempting type variable $T2 := UInt16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt16})
            Initial bindings: $T3 := UInt16, $T3 := String
            (attempting type variable $T3 := UInt16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T98, $T98.Stride) -> $T98)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16
        (attempting type variable $T4 := UInt16
          (failed constraint $T98 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T99.Stride, $T99) -> $T99)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (failed constraint $T99 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T100, $T100) -> $T100)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (failed constraint $T100 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T101, $T101) -> $T101)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          ($T2 bindings={(subtypes of) UInt16})
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T2 := UInt16
          (attempting type variable $T2 := UInt16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt16})
            Initial bindings: $T3 := UInt16, $T3 := String
            (attempting type variable $T3 := UInt16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T102>, Array<$T102>) -> Array<$T102>)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T103, $T104) -> $T103)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T104] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16
        (attempting type variable $T4 := UInt16
          (failed constraint $T103 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T106, $T105) -> $T105)
        ($T2 literal=3 involves_type_vars=[$T106] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (failed constraint $T105 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T107, $T108) -> $T107)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T108] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16
        (attempting type variable $T4 := UInt16
          (failed constraint $T107 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T109, $T109) -> $T109)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T110.Scalar, $T110) -> $T110)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T111, $T111.Scalar) -> $T111)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16
        (attempting type variable $T4 := UInt16
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Int16, Int16) -> Int16)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Int16 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Int16})
      Initial bindings: $T5 := Int16
      (attempting type variable $T5 := Int16
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Int16})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T112, $T112) -> $T112)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          ($T2 bindings={(subtypes of) Int16})
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T2 := Int16
          (attempting type variable $T2 := Int16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int16})
            Initial bindings: $T3 := Int16, $T3 := String
            (attempting type variable $T3 := Int16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T113, $T113.Stride) -> $T113)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16
        (attempting type variable $T4 := Int16
          (failed constraint $T113 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T114.Stride, $T114) -> $T114)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (failed constraint $T114 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T115, $T115) -> $T115)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (failed constraint $T115 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T116, $T116) -> $T116)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          ($T2 bindings={(subtypes of) Int16})
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T2 := Int16
          (attempting type variable $T2 := Int16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int16})
            Initial bindings: $T3 := Int16, $T3 := String
            (attempting type variable $T3 := Int16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T117>, Array<$T117>) -> Array<$T117>)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T118, $T119) -> $T118)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T119] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16
        (attempting type variable $T4 := Int16
          (failed constraint $T118 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T121, $T120) -> $T120)
        ($T2 literal=3 involves_type_vars=[$T121] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (failed constraint $T120 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T122, $T123) -> $T122)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T123] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16
        (attempting type variable $T4 := Int16
          (failed constraint $T122 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T124, $T124) -> $T124)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T125.Scalar, $T125) -> $T125)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T126, $T126.Scalar) -> $T126)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16
        (attempting type variable $T4 := Int16
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (UInt32, UInt32) -> UInt32)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv UInt32 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) UInt32})
      Initial bindings: $T5 := UInt32
      (attempting type variable $T5 := UInt32
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) UInt32})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T127, $T127) -> $T127)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          ($T2 bindings={(subtypes of) UInt32})
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T2 := UInt32
          (attempting type variable $T2 := UInt32
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt32})
            Initial bindings: $T3 := UInt32, $T3 := String
            (attempting type variable $T3 := UInt32
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T128, $T128.Stride) -> $T128)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32
        (attempting type variable $T4 := UInt32
          (failed constraint $T128 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T129.Stride, $T129) -> $T129)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (failed constraint $T129 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T130, $T130) -> $T130)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (failed constraint $T130 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T131, $T131) -> $T131)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          ($T2 bindings={(subtypes of) UInt32})
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T2 := UInt32
          (attempting type variable $T2 := UInt32
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt32})
            Initial bindings: $T3 := UInt32, $T3 := String
            (attempting type variable $T3 := UInt32
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T132>, Array<$T132>) -> Array<$T132>)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T133, $T134) -> $T133)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T134] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32
        (attempting type variable $T4 := UInt32
          (failed constraint $T133 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T136, $T135) -> $T135)
        ($T2 literal=3 involves_type_vars=[$T136] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (failed constraint $T135 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T137, $T138) -> $T137)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T138] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32
        (attempting type variable $T4 := UInt32
          (failed constraint $T137 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T139, $T139) -> $T139)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T140.Scalar, $T140) -> $T140)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T141, $T141.Scalar) -> $T141)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32
        (attempting type variable $T4 := UInt32
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Int32, Int32) -> Int32)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Int32 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Int32})
      Initial bindings: $T5 := Int32
      (attempting type variable $T5 := Int32
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Int32})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T142, $T142) -> $T142)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          ($T2 bindings={(subtypes of) Int32})
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T2 := Int32
          (attempting type variable $T2 := Int32
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int32})
            Initial bindings: $T3 := Int32, $T3 := String
            (attempting type variable $T3 := Int32
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T143, $T143.Stride) -> $T143)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32
        (attempting type variable $T4 := Int32
          (failed constraint $T143 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T144.Stride, $T144) -> $T144)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (failed constraint $T144 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T145, $T145) -> $T145)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (failed constraint $T145 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T146, $T146) -> $T146)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          ($T2 bindings={(subtypes of) Int32})
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T2 := Int32
          (attempting type variable $T2 := Int32
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int32})
            Initial bindings: $T3 := Int32, $T3 := String
            (attempting type variable $T3 := Int32
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T147>, Array<$T147>) -> Array<$T147>)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T148, $T149) -> $T148)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T149] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32
        (attempting type variable $T4 := Int32
          (failed constraint $T148 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T151, $T150) -> $T150)
        ($T2 literal=3 involves_type_vars=[$T151] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (failed constraint $T150 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T152, $T153) -> $T152)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T153] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32
        (attempting type variable $T4 := Int32
          (failed constraint $T152 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T154, $T154) -> $T154)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T155.Scalar, $T155) -> $T155)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T156, $T156.Scalar) -> $T156)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32
        (attempting type variable $T4 := Int32
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (UInt64, UInt64) -> UInt64)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T5:
    Constraints:
      $T5 operator arg conv UInt64 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) UInt64})
      Initial bindings: $T5 := UInt64
      (attempting type variable $T5 := UInt64
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) UInt64})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T157, $T157) -> $T157)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          ($T2 bindings={(subtypes of) UInt64})
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T2 := UInt64
          (attempting type variable $T2 := UInt64
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt64})
            Initial bindings: $T3 := UInt64, $T3 := String
            (attempting type variable $T3 := UInt64
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T158, $T158.Stride) -> $T158)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64
        (attempting type variable $T4 := UInt64
          (failed constraint $T158 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T159.Stride, $T159) -> $T159)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (failed constraint $T159 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T160, $T160) -> $T160)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (failed constraint $T160 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T161, $T161) -> $T161)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          ($T2 bindings={(subtypes of) UInt64})
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T2 := UInt64
          (attempting type variable $T2 := UInt64
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt64})
            Initial bindings: $T3 := UInt64, $T3 := String
            (attempting type variable $T3 := UInt64
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T162>, Array<$T162>) -> Array<$T162>)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T163, $T164) -> $T163)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T164] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64
        (attempting type variable $T4 := UInt64
          (failed constraint $T163 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T166, $T165) -> $T165)
        ($T2 literal=3 involves_type_vars=[$T166] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (failed constraint $T165 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T167, $T168) -> $T167)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T168] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64
        (attempting type variable $T4 := UInt64
          (failed constraint $T167 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T169, $T169) -> $T169)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T170.Scalar, $T170) -> $T170)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T171, $T171.Scalar) -> $T171)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64
        (attempting type variable $T4 := UInt64
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Int64, Int64) -> Int64)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Int64 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Int64})
      Initial bindings: $T5 := Int64
      (attempting type variable $T5 := Int64
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Int64})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T172, $T172) -> $T172)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          ($T2 bindings={(subtypes of) Int64})
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T2 := Int64
          (attempting type variable $T2 := Int64
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int64})
            Initial bindings: $T3 := Int64, $T3 := String
            (attempting type variable $T3 := Int64
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T173, $T173.Stride) -> $T173)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64
        (attempting type variable $T4 := Int64
          (failed constraint $T173 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T174.Stride, $T174) -> $T174)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (failed constraint $T174 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T175, $T175) -> $T175)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (failed constraint $T175 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T176, $T176) -> $T176)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          ($T2 bindings={(subtypes of) Int64})
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T2 := Int64
          (attempting type variable $T2 := Int64
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int64})
            Initial bindings: $T3 := Int64, $T3 := String
            (attempting type variable $T3 := Int64
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T177>, Array<$T177>) -> Array<$T177>)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T178, $T179) -> $T178)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T179] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64
        (attempting type variable $T4 := Int64
          (failed constraint $T178 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T181, $T180) -> $T180)
        ($T2 literal=3 involves_type_vars=[$T181] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (failed constraint $T180 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T182, $T183) -> $T182)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T183] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64
        (attempting type variable $T4 := Int64
          (failed constraint $T182 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T184, $T184) -> $T184)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T185.Scalar, $T185) -> $T185)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T186, $T186.Scalar) -> $T186)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64
        (attempting type variable $T4 := Int64
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (UInt, UInt) -> UInt)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv UInt [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) UInt})
      Initial bindings: $T5 := UInt
      (attempting type variable $T5 := UInt
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) UInt})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T187, $T187) -> $T187)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          ($T2 bindings={(subtypes of) UInt})
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T2 := UInt
          (attempting type variable $T2 := UInt
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt})
            Initial bindings: $T3 := UInt, $T3 := String
            (attempting type variable $T3 := UInt
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T188, $T188.Stride) -> $T188)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt
        (attempting type variable $T4 := UInt
          (failed constraint $T188 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T189.Stride, $T189) -> $T189)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (failed constraint $T189 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T190, $T190) -> $T190)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (failed constraint $T190 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T191, $T191) -> $T191)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          ($T2 bindings={(subtypes of) UInt})
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T2 := UInt
          (attempting type variable $T2 := UInt
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt})
            Initial bindings: $T3 := UInt, $T3 := String
            (attempting type variable $T3 := UInt
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T192>, Array<$T192>) -> Array<$T192>)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T193, $T194) -> $T193)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T194] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt
        (attempting type variable $T4 := UInt
          (failed constraint $T193 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T196, $T195) -> $T195)
        ($T2 literal=3 involves_type_vars=[$T196] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (failed constraint $T195 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T197, $T198) -> $T197)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T198] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt
        (attempting type variable $T4 := UInt
          (failed constraint $T197 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T199, $T199) -> $T199)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T200.Scalar, $T200) -> $T200)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T201, $T201.Scalar) -> $T201)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt
        (attempting type variable $T4 := UInt
          (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T202, $T202) -> $T202)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      (failed constraint $T4 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T202

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T202

  $T202:
    Constraints:
      $T202 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T202 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T202 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T202
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T203, $T203) -> $T203)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T204, $T204.Stride) -> $T204)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T205.Stride, $T205) -> $T205)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T206, $T206) -> $T206)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T207, $T207) -> $T207)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T208>, Array<$T208>) -> Array<$T208>)
      (failed constraint $T4 transitive conformance to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T209, $T210) -> $T209)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T210] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T212, $T211) -> $T211)
      ($T2 literal=3 involves_type_vars=[$T212] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T213, $T214) -> $T213)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T214] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T215, $T215) -> $T215)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T216.Scalar, $T216) -> $T216)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T217, $T217.Scalar) -> $T217)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T218, $T218.Stride) -> $T218)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T218

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T218 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T218

  $T218:
    Constraints:
      $T218 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T218 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T218
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T219, $T219.Stride) -> $T219)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T220, $T220) -> $T220)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T220 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T2 operator arg conv $T220 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T221.Stride, $T221) -> $T221)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (failed constraint $T221 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T222, $T222) -> $T222)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T222 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T223, $T223) -> $T223)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T223 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T224>, Array<$T224>) -> Array<$T224>)
      ($T2 literal=3 involves_type_vars=[$T224] bindings={(subtypes of) Array<$T224>})
      ($T3 literal=3 involves_type_vars=[$T224] bindings={(subtypes of) Array<$T224>})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T6 involves_type_vars=[$T224] bindings={(supertypes of) Array<$T224>})
      Initial bindings: $T6 := Array<$T224>
      (attempting type variable $T6 := Array<$T224>
        (failed constraint $T218 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T225, $T226) -> $T225)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T226] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T228, $T227) -> $T227)
      ($T2 literal=3 involves_type_vars=[$T228] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T229, $T230) -> $T229)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T230] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T231, $T231) -> $T231)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T232.Scalar, $T232) -> $T232)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T233, $T233.Scalar) -> $T233)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T234.Stride, $T234) -> $T234)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T234

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T234

  $T234:
    Constraints:
      $T234 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T234 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T234
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T235.Stride, $T235) -> $T235)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          (failed constraint $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          (failed constraint $T5 transitive conformance to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T236, $T236) -> $T236)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T237, $T237.Stride) -> $T237)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T238, $T238) -> $T238)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (failed constraint $T3 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T239, $T239) -> $T239)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T240>, Array<$T240>) -> Array<$T240>)
      ($T2 literal=3 involves_type_vars=[$T240] bindings={(subtypes of) Array<$T240>})
      ($T3 literal=3 involves_type_vars=[$T240] bindings={(subtypes of) Array<$T240>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Array<$T240>, $T2 := Int
      (attempting type variable $T2 := Array<$T240>
        (increasing score due to non-default literal)
        (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
      )
      (attempting type variable $T2 := Int
        (failed constraint $T2 operator arg conv Array<$T240> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 operator arg conv Array<$T240> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T241, $T242) -> $T241)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T242] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T244, $T243) -> $T243)
      ($T2 literal=3 involves_type_vars=[$T244] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T245, $T246) -> $T245)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T246] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T247, $T247) -> $T247)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T248.Scalar, $T248) -> $T248)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T249, $T249.Scalar) -> $T249)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T250, $T250) -> $T250)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T250

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T250 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T250 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T250

  $T250:
    Constraints:
      $T250 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T250 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T250 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T250
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T250

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T250 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T250 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T250

  $T250:
    Constraints:
      $T250 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T250 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T250 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T250
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T250

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T250 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T250 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T250

  $T250:
    Constraints:
      $T250 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T250 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T250 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T250
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T251, $T251) -> $T251)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T252, $T252.Stride) -> $T252)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T253.Stride, $T253) -> $T253)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T254, $T254) -> $T254)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T255, $T255) -> $T255)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T256>, Array<$T256>) -> Array<$T256>)
      (failed constraint $T4 transitive conformance to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T257, $T258) -> $T257)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T258] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T260, $T259) -> $T259)
      ($T2 literal=3 involves_type_vars=[$T260] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T261, $T262) -> $T261)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T262] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T263, $T263) -> $T263)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T264.Scalar, $T264) -> $T264)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T265, $T265.Scalar) -> $T265)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T266, $T266) -> $T266)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T266

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T266

  $T266:
    Constraints:
      $T266 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T266
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T266

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T266

  $T266:
    Constraints:
      $T266 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T266
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T266

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T266

  $T266:
    Constraints:
      $T266 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T266
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T266

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T266

  $T266:
    Constraints:
      $T266 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T266
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T266

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T266

  $T266:
    Constraints:
      $T266 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T266
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T266

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T266

  $T266:
    Constraints:
      $T266 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T266
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T266

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T266

  $T266:
    Constraints:
      $T266 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T266
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T266

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T266

  $T266:
    Constraints:
      $T266 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T266
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T266

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T266

  $T266:
    Constraints:
      $T266 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T266
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T266

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T266

  $T266:
    Constraints:
      $T266 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T266 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T266 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T266
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T267, $T267) -> $T267)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T268, $T268.Stride) -> $T268)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T269.Stride, $T269) -> $T269)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T270, $T270) -> $T270)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T271, $T271) -> $T271)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T272>, Array<$T272>) -> Array<$T272>)
      (failed constraint $T4 transitive conformance to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T273, $T274) -> $T273)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T274] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T276, $T275) -> $T275)
      ($T2 literal=3 involves_type_vars=[$T276] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T277, $T278) -> $T277)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T278] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T279, $T279) -> $T279)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T280.Scalar, $T280) -> $T280)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T281, $T281.Scalar) -> $T281)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Array<$T282>, Array<$T282>) -> Array<$T282>)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T4 delayed involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
    ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T283, $T283) -> $T283)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T2 $T3] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := Int, $T4 := String
      (attempting type variable $T4 := Array<$T282>
        (failed constraint $T283 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := String
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := Double
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T284, $T284.Stride) -> $T284)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T2] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := Int
      (attempting type variable $T4 := Array<$T282>
        (failed constraint $T284 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := Double
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T285.Stride, $T285) -> $T285)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T3] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := String
      (attempting type variable $T4 := Array<$T282>
        (failed constraint $T285 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := String
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T286, $T286) -> $T286)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T3 $T2] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := Int, $T4 := String
      (attempting type variable $T4 := Array<$T282>
        (failed constraint $T286 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := String
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := Double
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T287, $T287) -> $T287)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T2 $T3] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := Int, $T4 := String
      (attempting type variable $T4 := Array<$T282>
        (failed constraint $T287 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := String
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := Double
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T288>, Array<$T288>) -> Array<$T288>)
      ($T2 literal=3 involves_type_vars=[$T288] bindings={(subtypes of) Array<$T288>})
      ($T3 literal=3 involves_type_vars=[$T288] bindings={(subtypes of) Array<$T288>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      (attempting disjunction choice Array<$T288> bind Array<$T282> [deep equality] [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
        ($T2 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
        ($T3 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
        ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
        Initial bindings: $T2 := Array<$T282>, $T2 := Int
        (attempting type variable $T2 := Array<$T282>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv Array<$T288> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv Array<$T288> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice Array<$T288> operator arg conv Array<$T282> [array-upcast] [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
        (increasing score due to collection upcast conversion)
        ($T2 literal=3 involves_type_vars=[$T288] bindings={(subtypes of) Array<$T288>})
        ($T3 literal=3 involves_type_vars=[$T288] bindings={(subtypes of) Array<$T288>})
        ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
        Initial bindings: $T2 := Array<$T288>, $T2 := Int
        (attempting type variable $T2 := Array<$T288>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv Array<$T288> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv Array<$T288> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T289, $T290) -> $T289)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T290] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T2] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := Int
      (attempting type variable $T4 := Array<$T282>
        ($T2 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
        ($T3 literal=3 involves_type_vars=[$T290] bindings={})
        ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
        Initial bindings: $T2 := Array<$T282>, $T2 := Int
        (attempting type variable $T2 := Array<$T282>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv $T289 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T4 := Int
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := Double
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T292, $T291) -> $T291)
      ($T2 literal=3 involves_type_vars=[$T292] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T3] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := String
      (attempting type variable $T4 := Array<$T282>
        ($T2 literal=3 involves_type_vars=[$T292] bindings={})
        ($T3 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
        ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
        Initial bindings: $T3 := Array<$T282>, $T3 := String
        (attempting type variable $T3 := Array<$T282>
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv $T291 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      )
      (attempting type variable $T4 := String
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T293, $T294) -> $T293)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T294] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T2] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := Int
      (attempting type variable $T4 := Array<$T282>
        ($T2 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
        ($T3 literal=3 involves_type_vars=[$T294] bindings={})
        ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
        Initial bindings: $T2 := Array<$T282>, $T2 := Int
        (attempting type variable $T2 := Array<$T282>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv $T293 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T4 := Int
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := Double
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T295, $T295) -> $T295)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T3 $T2] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := Int, $T4 := String
      (attempting type variable $T4 := Array<$T282>
        (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T4 := String
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := Double
        (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682d698 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T296.Scalar, $T296) -> $T296)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T3] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := String
      (attempting type variable $T4 := Array<$T282>
        (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T4 := String
        (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T297, $T297.Scalar) -> $T297)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T282 $T2] bindings={(subtypes of) Array<$T282>})
      ($T5 literal=3 involves_type_vars=[$T282] bindings={(subtypes of) Array<$T282>})
      Initial bindings: $T4 := Array<$T282>, $T4 := Int
      (attempting type variable $T4 := Array<$T282>
        (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (failed constraint $T4.Scalar conforms to FloatingPoint [[locator@0x12682e028 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T4 := Double
        (failed constraint $T4 operator arg conv Array<$T282> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T298, $T299) -> $T298)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T299] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T298, $T299

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T298 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T299 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T299.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T298

  $T298:
    Constraints:
      $T298 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T298 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T299:
    Constraints:
      $T299 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T299 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T299.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T298 $T299
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T300, $T300) -> $T300)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T299] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T300 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T299] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T2 operator arg conv $T300 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T301, $T301.Stride) -> $T301)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T302.Stride, $T302) -> $T302)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T299] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (failed constraint $T302 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T303, $T303) -> $T303)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T299] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T303 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T304, $T304) -> $T304)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T299] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T304 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T305>, Array<$T305>) -> Array<$T305>)
      ($T2 literal=3 involves_type_vars=[$T305] bindings={(subtypes of) Array<$T305>})
      ($T3 literal=3 involves_type_vars=[$T305] bindings={(subtypes of) Array<$T305>})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      ($T6 involves_type_vars=[$T305] bindings={(supertypes of) Array<$T305>})
      Initial bindings: $T6 := Array<$T305>
      (attempting type variable $T6 := Array<$T305>
        ($T2 literal=3 involves_type_vars=[$T305] bindings={(subtypes of) Array<$T305>})
        ($T3 literal=3 involves_type_vars=[$T305] bindings={(subtypes of) Array<$T305>})
        ($T5 literal=3 involves_type_vars=[$T299] bindings={})
        Initial bindings: $T2 := Array<$T305>, $T2 := Int
        (attempting type variable $T2 := Array<$T305>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv Array<$T305> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv Array<$T305> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T306, $T307) -> $T306)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T307] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T309, $T308) -> $T308)
      ($T2 literal=3 involves_type_vars=[$T309] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T310, $T311) -> $T310)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T311] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T312, $T312) -> $T312)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T313.Scalar, $T313) -> $T313)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T314, $T314.Scalar) -> $T314)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T299] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T316, $T315) -> $T315)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T315, $T316

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T316 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T315 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T316.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T315

  $T315:
    Constraints:
      $T315 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T315 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T316:
    Constraints:
      $T316 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T316 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T316.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T315 $T316
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T317, $T317) -> $T317)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T316 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T317 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T316 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T2 operator arg conv $T317 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T318, $T318.Stride) -> $T318)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T319.Stride, $T319) -> $T319)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T316] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (failed constraint $T319 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T320, $T320) -> $T320)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T316 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T320 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T321, $T321) -> $T321)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T316 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T321 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T322>, Array<$T322>) -> Array<$T322>)
      ($T2 literal=3 involves_type_vars=[$T322] bindings={(subtypes of) Array<$T322>})
      ($T3 literal=3 involves_type_vars=[$T322] bindings={(subtypes of) Array<$T322>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T316 potentially_incomplete involves_type_vars=[$T322] bindings={(supertypes of) Array<$T322>})
      Initial bindings: $T316 := Array<$T322>
      (attempting type variable $T316 := Array<$T322>
        ($T2 literal=3 involves_type_vars=[$T322] bindings={(subtypes of) Array<$T322>})
        ($T3 literal=3 involves_type_vars=[$T322] bindings={(subtypes of) Array<$T322>})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T2 := Array<$T322>, $T2 := Int
        (attempting type variable $T2 := Array<$T322>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv Array<$T322> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv Array<$T322> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T324, $T323) -> $T323)
      ($T2 literal=3 involves_type_vars=[$T324] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T325, $T326) -> $T325)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T326] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T327, $T328) -> $T327)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T328] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T329, $T329) -> $T329)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T330.Scalar, $T330) -> $T330)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T331, $T331.Scalar) -> $T331)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T332, $T333) -> $T332)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T333] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T332, $T333

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T332 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T333 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T333.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T332

  $T332:
    Constraints:
      $T332 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T332 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T333:
    Constraints:
      $T333 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T333 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T333.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T332 $T333
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T334, $T334) -> $T334)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T333] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T334 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T333] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T2 operator arg conv $T334 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T335, $T335.Stride) -> $T335)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T336.Stride, $T336) -> $T336)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T333] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (failed constraint $T336 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T337, $T337) -> $T337)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T333] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T337 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T338, $T338) -> $T338)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T333] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T338 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T339>, Array<$T339>) -> Array<$T339>)
      ($T2 literal=3 involves_type_vars=[$T339] bindings={(subtypes of) Array<$T339>})
      ($T3 literal=3 involves_type_vars=[$T339] bindings={(subtypes of) Array<$T339>})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      ($T6 involves_type_vars=[$T339] bindings={(supertypes of) Array<$T339>})
      Initial bindings: $T6 := Array<$T339>
      (attempting type variable $T6 := Array<$T339>
        ($T2 literal=3 involves_type_vars=[$T339] bindings={(subtypes of) Array<$T339>})
        ($T3 literal=3 involves_type_vars=[$T339] bindings={(subtypes of) Array<$T339>})
        ($T5 literal=3 involves_type_vars=[$T333] bindings={})
        Initial bindings: $T2 := Array<$T339>, $T2 := Int
        (attempting type variable $T2 := Array<$T339>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv Array<$T339> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv Array<$T339> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T340, $T341) -> $T340)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T341] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T342, $T343) -> $T342)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T343] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T345, $T344) -> $T344)
      ($T2 literal=3 involves_type_vars=[$T345] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T346, $T346) -> $T346)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T347.Scalar, $T347) -> $T347)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T348, $T348.Scalar) -> $T348)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T333] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T349, $T349) -> $T349)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T350, $T350) -> $T350)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T351, $T351) -> $T351)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T352, $T352.Stride) -> $T352)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T353.Stride, $T353) -> $T353)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T354, $T354) -> $T354)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T355, $T355) -> $T355)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T356>, Array<$T356>) -> Array<$T356>)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T357, $T358) -> $T357)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T358] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T360, $T359) -> $T359)
      ($T2 literal=3 involves_type_vars=[$T360] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T361, $T362) -> $T361)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T362] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T363.Scalar, $T363) -> $T363)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T364, $T364.Scalar) -> $T364)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T365.Scalar, $T365) -> $T365)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T365

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T365

  $T365:
    Constraints:
      $T365 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T365 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T365
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T366.Scalar, $T366) -> $T366)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T367, $T367) -> $T367)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (failed constraint $T3 transitive conformance to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T368, $T368.Stride) -> $T368)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T369.Stride, $T369) -> $T369)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          (failed constraint $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          (failed constraint $T5 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T370, $T370) -> $T370)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (failed constraint $T3 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T371, $T371) -> $T371)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (failed constraint $T3 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T372>, Array<$T372>) -> Array<$T372>)
      ($T2 literal=3 involves_type_vars=[$T372] bindings={(subtypes of) Array<$T372>})
      ($T3 literal=3 involves_type_vars=[$T372] bindings={(subtypes of) Array<$T372>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Array<$T372>, $T2 := Int
      (attempting type variable $T2 := Array<$T372>
        (increasing score due to non-default literal)
        (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
      )
      (attempting type variable $T2 := Int
        (failed constraint $T2 operator arg conv Array<$T372> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 operator arg conv Array<$T372> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T373, $T374) -> $T373)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T374] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T376, $T375) -> $T375)
      ($T2 literal=3 involves_type_vars=[$T376] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T377, $T378) -> $T377)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T378] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T379, $T379) -> $T379)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T380, $T380.Scalar) -> $T380)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T381, $T381.Scalar) -> $T381)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T382, $T382.Scalar) -> $T382)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T383, $T383) -> $T383)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T384, $T384.Stride) -> $T384)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T385.Stride, $T385) -> $T385)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T386, $T386) -> $T386)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T387, $T387) -> $T387)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T388>, Array<$T388>) -> Array<$T388>)
      (failed constraint $T4 transitive conformance to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T389, $T390) -> $T389)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T390] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T392, $T391) -> $T391)
      ($T2 literal=3 involves_type_vars=[$T392] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T393, $T394) -> $T393)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T394] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T395, $T395) -> $T395)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (failed constraint $T2 transitive conformance to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T396.Scalar, $T396) -> $T396)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        (failed constraint $T3 transitive conformance to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
    (skipping unavailable disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
  )
  (skipping unavailable disjunction choice $T0 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
  (skipping unavailable disjunction choice $T0 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
  (skipping unavailable disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
  (skipping unavailable disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
  (skipping unavailable disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
---Solver statistics---
Total number of scopes explored: 1661
Maximum depth reached while exploring solutions: 7
Time: 3.153730e+02ms
---Attempting to salvage and emit diagnostics---
  ($T2 delayed literal=3 bindings={})
  ($T3 delayed literal=3 bindings={})
  ($T5 delayed literal=3 bindings={})
  (attempting disjunction choice $T0 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Int, Int) -> Int)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Int [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Int})
      Initial bindings: $T5 := Int
      (attempting type variable $T5 := Int
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Int})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (found solution 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        finished component #0)
          (composed solution 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) Int})
          Initial bindings: $T2 := Int
          (attempting type variable $T2 := Int
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #0)
          (composed solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T397, $T397) -> $T397)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T2 bindings={(subtypes of) Int})
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T2 := Int
          (attempting type variable $T2 := Int
            ($T3 literal=3 bindings={(subtypes of) Int})
            Initial bindings: $T3 := Int, $T3 := String
            (attempting type variable $T3 := Int
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T397 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T398, $T398.Stride) -> $T398)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T398 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T399.Stride, $T399) -> $T399)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T399 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T399 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T400, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T401) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T402, $T402) -> $T402)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T402 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T402 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T403, $T403) -> $T403)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T2 bindings={(subtypes of) Int})
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T2 := Int
          (attempting type variable $T2 := Int
            ($T3 literal=3 bindings={(subtypes of) Int})
            Initial bindings: $T3 := Int, $T3 := String
            (attempting type variable $T3 := Int
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T403 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T404>, Array<$T404>) -> Array<$T404>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T404] bindings={(subtypes of) Array<$T404>})
        ($T3 literal=3 involves_type_vars=[$T404] bindings={(subtypes of) Array<$T404>})
        ($T404 hole potentially_incomplete involves_type_vars=[$T3 $T2] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T404>, $T2 := Int
        (attempting type variable $T2 := Array<$T404>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T404> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T404> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T405, $T406) -> $T405)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T406] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int})
        ($T406 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T405 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T408, $T407) -> $T407)
        ($T2 literal=3 involves_type_vars=[$T408] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int})
        ($T408 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T407 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T408] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T408 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T408] bindings={})
            ($T408 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T408 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T408 := Int
              (attempting type variable $T408 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T408 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T409, $T410) -> $T409)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T410] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int})
        ($T410 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T409 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T411, $T411) -> $T411)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T411 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T411 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T412, $T412) -> $T412)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T412 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T413, $T413.Scalar) -> $T413)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T413 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T414.Scalar, $T414) -> $T414)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T414 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Int [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T415.Scalar, $T415) -> $T415)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T415 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T415 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T416, $T416.Scalar) -> $T416)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T416 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    finished component #0)
    Comparing 4 viable solutions
    --- Solution #0 ---
    Fixed score: 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as String @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (String, String) -> String @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).Int extension.+ as +: (Int, Int) -> Int

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).String extension.+ as +: (String, String) -> String


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]
    --- Solution #1 ---
    Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as Int @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (Int, Int) -> Int @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).Int extension.+ as +: (Int, Int) -> Int

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).Int extension.+ as +: (Int, Int) -> Int


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]
    --- Solution #2 ---
    Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as Int @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T397 as Int @ locator@0x1258f3b70 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> generic parameter 'Self']
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (Int, Int) -> Int @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).Int extension.+ as +: (Int, Int) -> Int

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).AdditiveArithmetic.+ as +: ($T397, $T397) -> $T397


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Opened types:
  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] opens τ_0_0 -> $T397

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]
    --- Solution #3 ---
    Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as Int @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T403 as Int @ locator@0x12682b9b0 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> generic parameter 'Self']
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (Int, Int) -> Int @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).Int extension.+ as +: (Int, Int) -> Int

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).BinaryInteger.+ as +: ($T403, $T403) -> $T403


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Opened types:
  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] opens τ_0_0 -> $T403

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]
    comparing solutions 1 and 0
    comparing solutions 2 and 1
Comparing declarations
static func + (lhs: Self, rhs: Self) -> Self
and
static func + (lhs: Int, rhs: Int) -> Int
(isDynamicOverloadComparison: 0)
comparison result: not better
Comparing declarations
static func + (lhs: Int, rhs: Int) -> Int
and
static func + (lhs: Self, rhs: Self) -> Self
(isDynamicOverloadComparison: 0)
comparison result: better
    comparing solutions 3 and 1
Comparing declarations
override static func + (lhs: Self, rhs: Self) -> Self
and
static func + (lhs: Int, rhs: Int) -> Int
(isDynamicOverloadComparison: 0)
comparison result: not better
Comparing declarations
static func + (lhs: Int, rhs: Int) -> Int
and
override static func + (lhs: Self, rhs: Self) -> Self
(isDynamicOverloadComparison: 0)
comparison result: better
    comparing solutions 1 and 0
    comparing solutions 1 and 2
    comparing solutions 1 and 3
      (composed solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (String, String) -> String)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv String [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv String [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 literal=3 bindings={(subtypes of) String})
      Initial bindings: $T5 := String, $T5 := Int
      (attempting type variable $T5 := String
        (increasing score due to non-default literal)
        (failed constraint $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];)
      )
      (attempting type variable $T5 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1])
        (increasing score due to attempting to fix the source)
        (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      )
      (attempting type variable $T5 := Double
        (increasing score due to non-default literal)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T5 operator arg conv String [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) String})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        finished component #0)
          (composed solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T417, $T417) -> $T417)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) String})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T417 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 bindings={(subtypes of) Int})
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T2 := Int
          (attempting type variable $T2 := Int
            ($T3 literal=3 bindings={(subtypes of) Int})
            Initial bindings: $T3 := Int, $T3 := String
            (attempting type variable $T3 := Int
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T417 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 bindings={(subtypes of) Double})
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T2 := Double
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T418, $T418.Stride) -> $T418)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2] bindings={(subtypes of) String})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T418 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T418 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T418 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T419.Stride, $T419) -> $T419)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T3] bindings={(subtypes of) String})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T419 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T420, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv String [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T421) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv String [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T422, $T422) -> $T422)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) String})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T422 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T422 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 bindings={(subtypes of) Double})
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T2 := Double
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T423, $T423) -> $T423)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) String})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T423 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 bindings={(subtypes of) Int})
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T2 := Int
          (attempting type variable $T2 := Int
            ($T3 literal=3 bindings={(subtypes of) Int})
            Initial bindings: $T3 := Int, $T3 := String
            (attempting type variable $T3 := Int
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T423 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T423 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T424>, Array<$T424>) -> Array<$T424>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T424] bindings={(subtypes of) Array<$T424>})
        ($T3 literal=3 involves_type_vars=[$T424] bindings={(subtypes of) Array<$T424>})
        ($T424 hole potentially_incomplete involves_type_vars=[$T3 $T2] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T424>, $T2 := Int
        (attempting type variable $T2 := Array<$T424>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T424> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T425, $T426) -> $T425)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T426] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2] bindings={(subtypes of) String})
        ($T426 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          ($T2 literal=3 bindings={(subtypes of) String})
          ($T3 literal=3 involves_type_vars=[$T426] bindings={})
          ($T426 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            ($T3 literal=3 involves_type_vars=[$T426] bindings={})
            ($T426 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
            Initial bindings: $T3 := String
            (attempting type variable $T3 := String
              ($T426 potentially_incomplete bindings={(supertypes of) String})
              Initial bindings: $T426 := String
              (attempting type variable $T426 := String
                (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
              )
            )
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv $T425 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T425 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T425 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T428, $T427) -> $T427)
        ($T2 literal=3 involves_type_vars=[$T428] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T3] bindings={(subtypes of) String})
        ($T428 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          ($T2 literal=3 involves_type_vars=[$T428] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T428 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T428] bindings={})
            ($T428 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T428 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T428 := Int
              (attempting type variable $T428 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T428 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              ($T428 potentially_incomplete bindings={(supertypes of) Double})
              Initial bindings: $T428 := Double
              (attempting type variable $T428 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T428 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T429, $T430) -> $T429)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T430] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2] bindings={(subtypes of) String})
        ($T430 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          ($T2 literal=3 bindings={(subtypes of) String})
          ($T3 literal=3 involves_type_vars=[$T430] bindings={})
          ($T430 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            ($T3 literal=3 involves_type_vars=[$T430] bindings={})
            ($T430 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
            Initial bindings: $T3 := String
            (attempting type variable $T3 := String
              ($T430 potentially_incomplete bindings={(supertypes of) String})
              Initial bindings: $T430 := String
              (attempting type variable $T430 := String
                (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
              )
            )
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv $T429 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T429 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T429 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T431, $T431) -> $T431)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) String})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T431 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T431 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T431 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T432, $T432) -> $T432)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) String})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T432 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv String [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv String [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T433, $T433.Scalar) -> $T433)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2] bindings={(subtypes of) String})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T433 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv String [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv String [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T434.Scalar, $T434) -> $T434)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T3] bindings={(subtypes of) String})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T434 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T435.Scalar, $T435) -> $T435)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T3] bindings={(subtypes of) String})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T435 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T436, $T436.Scalar) -> $T436)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2] bindings={(subtypes of) String})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T436 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T436 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T436 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    finished component #0)
    Comparing 3 viable solutions
    --- Solution #0 ---
    Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as String @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (String, String) -> String @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).String extension.+ as +: (String, String) -> String

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).String extension.+ as +: (String, String) -> String


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]
    --- Solution #1 ---
    Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as String @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T425 as String @ locator@0x12682c0b0 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> generic parameter 'Self']
  $T426 as String @ locator@0x12682c110 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> generic parameter 'Other']
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (String, String) -> String @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).String extension.+ as +: (String, String) -> String

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).RangeReplaceableCollection extension.+ as +: ($T425, $T426) -> $T425


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Opened types:
  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] opens τ_1_0 -> $T426, τ_0_0 -> $T425

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]
    --- Solution #2 ---
    Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as String @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T430 as String @ locator@0x12682cee0 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> generic parameter 'Other']
  $T429 as String @ locator@0x12682c0b0 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> generic parameter 'Self']
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (String, String) -> String @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).String extension.+ as +: (String, String) -> String

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).RangeReplaceableCollection extension.+ as +: ($T429, $T430) -> $T429


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Opened types:
  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] opens τ_1_0 -> $T430, τ_0_0 -> $T429

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]
    comparing solutions 1 and 0
Comparing declarations
@inlinable static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element
and
@inlinable @_semantics("string.concat") static func + (lhs: String, rhs: String) -> String
(isDynamicOverloadComparison: 0)
comparison result: not better
Comparing declarations
@inlinable @_semantics("string.concat") static func + (lhs: String, rhs: String) -> String
and
@inlinable static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element
(isDynamicOverloadComparison: 0)
comparison result: better
    comparing solutions 2 and 0
Comparing declarations
@inlinable static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection, Self.Element == Other.Element
and
@inlinable @_semantics("string.concat") static func + (lhs: String, rhs: String) -> String
(isDynamicOverloadComparison: 0)
comparison result: not better
Comparing declarations
@inlinable @_semantics("string.concat") static func + (lhs: String, rhs: String) -> String
and
@inlinable static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection, Self.Element == Other.Element
(isDynamicOverloadComparison: 0)
comparison result: better
    comparing solutions 0 and 1
    comparing solutions 0 and 2
      (solution is worse than the best solution)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Float16, Float16) -> Float16)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Float16 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Float16})
      Initial bindings: $T5 := Float16
      (attempting type variable $T5 := Float16
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Float16})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) Float16})
          Initial bindings: $T2 := Float16
          (attempting type variable $T2 := Float16
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T437, $T437) -> $T437)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          ($T2 bindings={(subtypes of) Float16})
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T2 := Float16
          (attempting type variable $T2 := Float16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Float16})
            Initial bindings: $T3 := Float16, $T3 := String
            (attempting type variable $T3 := Float16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T437 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T437 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T438, $T438.Stride) -> $T438)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T438 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T439.Stride, $T439) -> $T439)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T439 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T439 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T440, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T441) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T442, $T442) -> $T442)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          ($T2 bindings={(subtypes of) Float16})
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T2 := Float16
          (attempting type variable $T2 := Float16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Float16})
            Initial bindings: $T3 := Float16, $T3 := String
            (attempting type variable $T3 := Float16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T442 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T442 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T443, $T443) -> $T443)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T443 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T443 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T444>, Array<$T444>) -> Array<$T444>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T444] bindings={(subtypes of) Array<$T444>})
        ($T3 literal=3 involves_type_vars=[$T444] bindings={(subtypes of) Array<$T444>})
        ($T444 hole potentially_incomplete involves_type_vars=[$T3 $T2] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T444>, $T2 := Int
        (attempting type variable $T2 := Array<$T444>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T444> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T445, $T446) -> $T445)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T446] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float16})
        ($T446 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Float16
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T445 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T448, $T447) -> $T447)
        ($T2 literal=3 involves_type_vars=[$T448] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float16})
        ($T448 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T447 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T448] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T448 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T448] bindings={})
            ($T448 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T448 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T448 := Int
              (attempting type variable $T448 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T448 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T449, $T450) -> $T449)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T450] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float16})
        ($T450 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Float16
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T449 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T451, $T451) -> $T451)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T451 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T451 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T452, $T452) -> $T452)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T452 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T453, $T453.Scalar) -> $T453)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T453 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T454.Scalar, $T454) -> $T454)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T454 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Float16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T455.Scalar, $T455) -> $T455)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16, $T4 := String
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T455 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T455 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T456, $T456.Scalar) -> $T456)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float16})
        Initial bindings: $T4 := Float16
        (attempting type variable $T4 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T456 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Float, Float) -> Float)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Float [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Float})
      Initial bindings: $T5 := Float
      (attempting type variable $T5 := Float
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Float})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) Float})
          Initial bindings: $T2 := Float
          (attempting type variable $T2 := Float
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T457, $T457) -> $T457)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          ($T2 bindings={(subtypes of) Float})
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T2 := Float
          (attempting type variable $T2 := Float
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Float})
            Initial bindings: $T3 := Float, $T3 := String
            (attempting type variable $T3 := Float
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T457 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T457 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T458, $T458.Stride) -> $T458)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T458 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T459.Stride, $T459) -> $T459)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T459 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T459 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T460, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T461) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T462, $T462) -> $T462)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          ($T2 bindings={(subtypes of) Float})
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T2 := Float
          (attempting type variable $T2 := Float
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Float})
            Initial bindings: $T3 := Float, $T3 := String
            (attempting type variable $T3 := Float
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T462 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T462 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T463, $T463) -> $T463)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T463 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T463 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T464>, Array<$T464>) -> Array<$T464>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T464] bindings={(subtypes of) Array<$T464>})
        ($T3 literal=3 involves_type_vars=[$T464] bindings={(subtypes of) Array<$T464>})
        ($T464 hole potentially_incomplete involves_type_vars=[$T3 $T2] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T464>, $T2 := Int
        (attempting type variable $T2 := Array<$T464>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T464> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T464> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T465, $T466) -> $T465)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T466] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float})
        ($T466 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Float
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T465 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T468, $T467) -> $T467)
        ($T2 literal=3 involves_type_vars=[$T468] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float})
        ($T468 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T467 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T468] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T468 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T468] bindings={})
            ($T468 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T468 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T468 := Int
              (attempting type variable $T468 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T468 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T469, $T470) -> $T469)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T470] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float})
        ($T470 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Float
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T469 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T471, $T471) -> $T471)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T471 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T471 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T472, $T472) -> $T472)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T472 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T473, $T473.Scalar) -> $T473)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T473 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T474.Scalar, $T474) -> $T474)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T474 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Float [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T475.Scalar, $T475) -> $T475)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float, $T4 := String
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T475 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T475 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T476, $T476.Scalar) -> $T476)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Float})
        Initial bindings: $T4 := Float
        (attempting type variable $T4 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T476 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Double, Double) -> Double)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Double [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Double})
      Initial bindings: $T5 := Double
      (attempting type variable $T5 := Double
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Double})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) Double})
          Initial bindings: $T2 := Double
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T477, $T477) -> $T477)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T2 bindings={(subtypes of) Double})
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T2 := Double
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Double})
            Initial bindings: $T3 := Double, $T3 := String
            (attempting type variable $T3 := Double
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T477 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T477 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T478, $T478.Stride) -> $T478)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T478 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T479.Stride, $T479) -> $T479)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T479 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T479 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T480, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T481) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T482, $T482) -> $T482)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T2 bindings={(subtypes of) Double})
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T2 := Double
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Double})
            Initial bindings: $T3 := Double, $T3 := String
            (attempting type variable $T3 := Double
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T482 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T482 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T483, $T483) -> $T483)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T483 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T483 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T484>, Array<$T484>) -> Array<$T484>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T484] bindings={(subtypes of) Array<$T484>})
        ($T3 literal=3 involves_type_vars=[$T484] bindings={(subtypes of) Array<$T484>})
        ($T484 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T484>, $T2 := Int
        (attempting type variable $T2 := Array<$T484>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T484> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T484> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T485, $T486) -> $T485)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T486] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Double})
        ($T486 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T485 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T488, $T487) -> $T487)
        ($T2 literal=3 involves_type_vars=[$T488] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Double})
        ($T488 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T487 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T488] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T488 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T488] bindings={})
            ($T488 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T488 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T488 := Int
              (attempting type variable $T488 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T488 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T489, $T490) -> $T489)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T490] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Double})
        ($T490 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T489 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T491, $T491) -> $T491)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T491 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T491 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T492, $T492) -> $T492)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T492 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T493, $T493.Scalar) -> $T493)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T493 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T494.Scalar, $T494) -> $T494)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T494 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Double [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T495.Scalar, $T495) -> $T495)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T495 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T495 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T496, $T496.Scalar) -> $T496)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Double})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T496 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (UInt8, UInt8) -> UInt8)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv UInt8 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) UInt8})
      Initial bindings: $T5 := UInt8
      (attempting type variable $T5 := UInt8
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) UInt8})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) UInt8})
          Initial bindings: $T2 := UInt8
          (attempting type variable $T2 := UInt8
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T497, $T497) -> $T497)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          ($T2 bindings={(subtypes of) UInt8})
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T2 := UInt8
          (attempting type variable $T2 := UInt8
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt8})
            Initial bindings: $T3 := UInt8, $T3 := String
            (attempting type variable $T3 := UInt8
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T497 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T497 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T498, $T498.Stride) -> $T498)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T498 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T499.Stride, $T499) -> $T499)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T499 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T499 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T500, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T501) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T502, $T502) -> $T502)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T502 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T502 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T503, $T503) -> $T503)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          ($T2 bindings={(subtypes of) UInt8})
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T2 := UInt8
          (attempting type variable $T2 := UInt8
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt8})
            Initial bindings: $T3 := UInt8, $T3 := String
            (attempting type variable $T3 := UInt8
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T503 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T503 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T504>, Array<$T504>) -> Array<$T504>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T504] bindings={(subtypes of) Array<$T504>})
        ($T3 literal=3 involves_type_vars=[$T504] bindings={(subtypes of) Array<$T504>})
        ($T504 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T504>, $T2 := Int
        (attempting type variable $T2 := Array<$T504>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T504> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T504> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T505, $T506) -> $T505)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T506] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt8})
        ($T506 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := UInt8
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T505 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T508, $T507) -> $T507)
        ($T2 literal=3 involves_type_vars=[$T508] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt8})
        ($T508 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T507 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T508] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T508 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T508] bindings={})
            ($T508 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T508 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T508 := Int
              (attempting type variable $T508 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T508 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T509, $T510) -> $T509)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T510] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt8})
        ($T510 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := UInt8
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T509 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T511, $T511) -> $T511)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T511 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T511 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T512, $T512) -> $T512)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T512 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T513, $T513.Scalar) -> $T513)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T513 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T514.Scalar, $T514) -> $T514)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T514 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv UInt8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T515.Scalar, $T515) -> $T515)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8, $T4 := String
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T515 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T515 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T516, $T516.Scalar) -> $T516)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt8})
        Initial bindings: $T4 := UInt8
        (attempting type variable $T4 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T516 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Int8, Int8) -> Int8)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Int8 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Int8})
      Initial bindings: $T5 := Int8
      (attempting type variable $T5 := Int8
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Int8})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) Int8})
          Initial bindings: $T2 := Int8
          (attempting type variable $T2 := Int8
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T517, $T517) -> $T517)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          ($T2 bindings={(subtypes of) Int8})
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T2 := Int8
          (attempting type variable $T2 := Int8
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int8})
            Initial bindings: $T3 := Int8, $T3 := String
            (attempting type variable $T3 := Int8
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T517 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T517 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T518, $T518.Stride) -> $T518)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T518 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T519.Stride, $T519) -> $T519)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T519 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T519 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T520, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T521) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T522, $T522) -> $T522)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T522 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T522 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T523, $T523) -> $T523)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          ($T2 bindings={(subtypes of) Int8})
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T2 := Int8
          (attempting type variable $T2 := Int8
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int8})
            Initial bindings: $T3 := Int8, $T3 := String
            (attempting type variable $T3 := Int8
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T523 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T523 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T524>, Array<$T524>) -> Array<$T524>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T524] bindings={(subtypes of) Array<$T524>})
        ($T3 literal=3 involves_type_vars=[$T524] bindings={(subtypes of) Array<$T524>})
        ($T524 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T524>, $T2 := Int
        (attempting type variable $T2 := Array<$T524>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T524> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T524> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T525, $T526) -> $T525)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T526] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int8})
        ($T526 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int8
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T525 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T528, $T527) -> $T527)
        ($T2 literal=3 involves_type_vars=[$T528] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int8})
        ($T528 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T527 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T528] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T528 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T528] bindings={})
            ($T528 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T528 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T528 := Int
              (attempting type variable $T528 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T528 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T529, $T530) -> $T529)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T530] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int8})
        ($T530 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int8
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T529 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T531, $T531) -> $T531)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T531 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T531 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T532, $T532) -> $T532)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T532 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T533, $T533.Scalar) -> $T533)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T533 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T534.Scalar, $T534) -> $T534)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T534 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Int8 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T535.Scalar, $T535) -> $T535)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8, $T4 := String
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T535 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T535 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T536, $T536.Scalar) -> $T536)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int8})
        Initial bindings: $T4 := Int8
        (attempting type variable $T4 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T536 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (UInt16, UInt16) -> UInt16)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv UInt16 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) UInt16})
      Initial bindings: $T5 := UInt16
      (attempting type variable $T5 := UInt16
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) UInt16})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) UInt16})
          Initial bindings: $T2 := UInt16
          (attempting type variable $T2 := UInt16
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T537, $T537) -> $T537)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          ($T2 bindings={(subtypes of) UInt16})
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T2 := UInt16
          (attempting type variable $T2 := UInt16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt16})
            Initial bindings: $T3 := UInt16, $T3 := String
            (attempting type variable $T3 := UInt16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T537 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T537 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T538, $T538.Stride) -> $T538)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T538 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T539.Stride, $T539) -> $T539)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T539 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T539 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T540, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T541) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T542, $T542) -> $T542)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T542 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T542 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T543, $T543) -> $T543)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          ($T2 bindings={(subtypes of) UInt16})
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T2 := UInt16
          (attempting type variable $T2 := UInt16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt16})
            Initial bindings: $T3 := UInt16, $T3 := String
            (attempting type variable $T3 := UInt16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T543 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T543 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T544>, Array<$T544>) -> Array<$T544>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T544] bindings={(subtypes of) Array<$T544>})
        ($T3 literal=3 involves_type_vars=[$T544] bindings={(subtypes of) Array<$T544>})
        ($T544 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T544>, $T2 := Int
        (attempting type variable $T2 := Array<$T544>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T544> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T544> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T545, $T546) -> $T545)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T546] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt16})
        ($T546 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := UInt16
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T545 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T548, $T547) -> $T547)
        ($T2 literal=3 involves_type_vars=[$T548] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt16})
        ($T548 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T547 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T548] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T548 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T548] bindings={})
            ($T548 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T548 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T548 := Int
              (attempting type variable $T548 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T548 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T549, $T550) -> $T549)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T550] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt16})
        ($T550 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := UInt16
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T549 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T551, $T551) -> $T551)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T551 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T551 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T552, $T552) -> $T552)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T552 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T553, $T553.Scalar) -> $T553)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T553 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T554.Scalar, $T554) -> $T554)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T554 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv UInt16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T555.Scalar, $T555) -> $T555)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16, $T4 := String
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T555 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T555 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T556, $T556.Scalar) -> $T556)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt16})
        Initial bindings: $T4 := UInt16
        (attempting type variable $T4 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T556 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Int16, Int16) -> Int16)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Int16 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Int16})
      Initial bindings: $T5 := Int16
      (attempting type variable $T5 := Int16
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Int16})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) Int16})
          Initial bindings: $T2 := Int16
          (attempting type variable $T2 := Int16
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T557, $T557) -> $T557)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          ($T2 bindings={(subtypes of) Int16})
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T2 := Int16
          (attempting type variable $T2 := Int16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int16})
            Initial bindings: $T3 := Int16, $T3 := String
            (attempting type variable $T3 := Int16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T557 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T557 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T558, $T558.Stride) -> $T558)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T558 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T559.Stride, $T559) -> $T559)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T559 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T559 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T560, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T561) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T562, $T562) -> $T562)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T562 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T562 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T563, $T563) -> $T563)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          ($T2 bindings={(subtypes of) Int16})
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T2 := Int16
          (attempting type variable $T2 := Int16
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int16})
            Initial bindings: $T3 := Int16, $T3 := String
            (attempting type variable $T3 := Int16
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T563 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T563 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T564>, Array<$T564>) -> Array<$T564>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T564] bindings={(subtypes of) Array<$T564>})
        ($T3 literal=3 involves_type_vars=[$T564] bindings={(subtypes of) Array<$T564>})
        ($T564 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T564>, $T2 := Int
        (attempting type variable $T2 := Array<$T564>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T564> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T564> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T565, $T566) -> $T565)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T566] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int16})
        ($T566 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int16
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T565 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T568, $T567) -> $T567)
        ($T2 literal=3 involves_type_vars=[$T568] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int16})
        ($T568 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T567 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T568] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T568 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T568] bindings={})
            ($T568 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T568 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T568 := Int
              (attempting type variable $T568 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T568 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T569, $T570) -> $T569)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T570] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int16})
        ($T570 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int16
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T569 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T571, $T571) -> $T571)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T571 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T571 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T572, $T572) -> $T572)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T572 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T573, $T573.Scalar) -> $T573)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T573 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T574.Scalar, $T574) -> $T574)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T574 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Int16 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T575.Scalar, $T575) -> $T575)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16, $T4 := String
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T575 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T575 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T576, $T576.Scalar) -> $T576)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int16})
        Initial bindings: $T4 := Int16
        (attempting type variable $T4 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T576 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (UInt32, UInt32) -> UInt32)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv UInt32 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) UInt32})
      Initial bindings: $T5 := UInt32
      (attempting type variable $T5 := UInt32
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) UInt32})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) UInt32})
          Initial bindings: $T2 := UInt32
          (attempting type variable $T2 := UInt32
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T577, $T577) -> $T577)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          ($T2 bindings={(subtypes of) UInt32})
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T2 := UInt32
          (attempting type variable $T2 := UInt32
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt32})
            Initial bindings: $T3 := UInt32, $T3 := String
            (attempting type variable $T3 := UInt32
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T577 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T577 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T578, $T578.Stride) -> $T578)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T578 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T579.Stride, $T579) -> $T579)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T579 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T579 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T580, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T581) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T582, $T582) -> $T582)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T582 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T582 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T583, $T583) -> $T583)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          ($T2 bindings={(subtypes of) UInt32})
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T2 := UInt32
          (attempting type variable $T2 := UInt32
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt32})
            Initial bindings: $T3 := UInt32, $T3 := String
            (attempting type variable $T3 := UInt32
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T583 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T583 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T584>, Array<$T584>) -> Array<$T584>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T584] bindings={(subtypes of) Array<$T584>})
        ($T3 literal=3 involves_type_vars=[$T584] bindings={(subtypes of) Array<$T584>})
        ($T584 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T584>, $T2 := Int
        (attempting type variable $T2 := Array<$T584>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T584> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T584> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T585, $T586) -> $T585)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T586] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt32})
        ($T586 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := UInt32
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T585 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T588, $T587) -> $T587)
        ($T2 literal=3 involves_type_vars=[$T588] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt32})
        ($T588 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T587 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T588] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T588 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T588] bindings={})
            ($T588 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T588 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T588 := Int
              (attempting type variable $T588 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T588 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T589, $T590) -> $T589)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T590] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt32})
        ($T590 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := UInt32
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T589 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T591, $T591) -> $T591)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T591 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T591 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T592, $T592) -> $T592)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T592 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T593, $T593.Scalar) -> $T593)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T593 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T594.Scalar, $T594) -> $T594)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T594 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv UInt32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T595.Scalar, $T595) -> $T595)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32, $T4 := String
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T595 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T595 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T596, $T596.Scalar) -> $T596)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt32})
        Initial bindings: $T4 := UInt32
        (attempting type variable $T4 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T596 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Int32, Int32) -> Int32)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Int32 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Int32})
      Initial bindings: $T5 := Int32
      (attempting type variable $T5 := Int32
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Int32})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) Int32})
          Initial bindings: $T2 := Int32
          (attempting type variable $T2 := Int32
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T597, $T597) -> $T597)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          ($T2 bindings={(subtypes of) Int32})
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T2 := Int32
          (attempting type variable $T2 := Int32
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int32})
            Initial bindings: $T3 := Int32, $T3 := String
            (attempting type variable $T3 := Int32
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T597 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T597 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T598, $T598.Stride) -> $T598)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T598 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T599.Stride, $T599) -> $T599)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T599 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T599 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T600, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T601) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T602, $T602) -> $T602)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T602 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T602 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T603, $T603) -> $T603)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          ($T2 bindings={(subtypes of) Int32})
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T2 := Int32
          (attempting type variable $T2 := Int32
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int32})
            Initial bindings: $T3 := Int32, $T3 := String
            (attempting type variable $T3 := Int32
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T603 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T603 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T604>, Array<$T604>) -> Array<$T604>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T604] bindings={(subtypes of) Array<$T604>})
        ($T3 literal=3 involves_type_vars=[$T604] bindings={(subtypes of) Array<$T604>})
        ($T604 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T604>, $T2 := Int
        (attempting type variable $T2 := Array<$T604>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T604> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T604> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T605, $T606) -> $T605)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T606] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int32})
        ($T606 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int32
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T605 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T608, $T607) -> $T607)
        ($T2 literal=3 involves_type_vars=[$T608] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int32})
        ($T608 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T607 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T608] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T608 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T608] bindings={})
            ($T608 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T608 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T608 := Int
              (attempting type variable $T608 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T608 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T609, $T610) -> $T609)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T610] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int32})
        ($T610 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int32
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T609 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T611, $T611) -> $T611)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T611 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T611 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T612, $T612) -> $T612)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T612 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T613, $T613.Scalar) -> $T613)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T613 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T614.Scalar, $T614) -> $T614)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T614 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Int32 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T615.Scalar, $T615) -> $T615)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32, $T4 := String
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T615 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T615 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T616, $T616.Scalar) -> $T616)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int32})
        Initial bindings: $T4 := Int32
        (attempting type variable $T4 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T616 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (UInt64, UInt64) -> UInt64)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T5:
    Constraints:
      $T5 operator arg conv UInt64 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) UInt64})
      Initial bindings: $T5 := UInt64
      (attempting type variable $T5 := UInt64
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) UInt64})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) UInt64})
          Initial bindings: $T2 := UInt64
          (attempting type variable $T2 := UInt64
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T617, $T617) -> $T617)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          ($T2 bindings={(subtypes of) UInt64})
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T2 := UInt64
          (attempting type variable $T2 := UInt64
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt64})
            Initial bindings: $T3 := UInt64, $T3 := String
            (attempting type variable $T3 := UInt64
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T617 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T617 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T618, $T618.Stride) -> $T618)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T618 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T619.Stride, $T619) -> $T619)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T619 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T619 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T620, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T621) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T622, $T622) -> $T622)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T622 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T622 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T623, $T623) -> $T623)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          ($T2 bindings={(subtypes of) UInt64})
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T2 := UInt64
          (attempting type variable $T2 := UInt64
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt64})
            Initial bindings: $T3 := UInt64, $T3 := String
            (attempting type variable $T3 := UInt64
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T623 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T623 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T624>, Array<$T624>) -> Array<$T624>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T624] bindings={(subtypes of) Array<$T624>})
        ($T3 literal=3 involves_type_vars=[$T624] bindings={(subtypes of) Array<$T624>})
        ($T624 hole potentially_incomplete involves_type_vars=[$T3 $T2] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T624>, $T2 := Int
        (attempting type variable $T2 := Array<$T624>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T624> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T624> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T625, $T626) -> $T625)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T626] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt64})
        ($T626 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := UInt64
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T625 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T628, $T627) -> $T627)
        ($T2 literal=3 involves_type_vars=[$T628] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt64})
        ($T628 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T627 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T628] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T628 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T628] bindings={})
            ($T628 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T628 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T628 := Int
              (attempting type variable $T628 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T628 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T629, $T630) -> $T629)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T630] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt64})
        ($T630 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := UInt64
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T629 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T631, $T631) -> $T631)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T631 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T631 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T632, $T632) -> $T632)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T632 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T633, $T633.Scalar) -> $T633)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T633 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T634.Scalar, $T634) -> $T634)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T634 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv UInt64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T635.Scalar, $T635) -> $T635)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64, $T4 := String
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T635 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T635 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T636, $T636.Scalar) -> $T636)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt64})
        Initial bindings: $T4 := UInt64
        (attempting type variable $T4 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T636 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Int64, Int64) -> Int64)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T5:
    Constraints:
      $T5 operator arg conv Int64 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) Int64})
      Initial bindings: $T5 := Int64
      (attempting type variable $T5 := Int64
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) Int64})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) Int64})
          Initial bindings: $T2 := Int64
          (attempting type variable $T2 := Int64
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T637, $T637) -> $T637)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          ($T2 bindings={(subtypes of) Int64})
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T2 := Int64
          (attempting type variable $T2 := Int64
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int64})
            Initial bindings: $T3 := Int64, $T3 := String
            (attempting type variable $T3 := Int64
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T637 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T637 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T638, $T638.Stride) -> $T638)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T638 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T639.Stride, $T639) -> $T639)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T639 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T639 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T640, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T641) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T642, $T642) -> $T642)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T642 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T642 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T643, $T643) -> $T643)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          ($T2 bindings={(subtypes of) Int64})
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T2 := Int64
          (attempting type variable $T2 := Int64
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) Int64})
            Initial bindings: $T3 := Int64, $T3 := String
            (attempting type variable $T3 := Int64
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T643 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T643 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T644>, Array<$T644>) -> Array<$T644>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T644] bindings={(subtypes of) Array<$T644>})
        ($T3 literal=3 involves_type_vars=[$T644] bindings={(subtypes of) Array<$T644>})
        ($T644 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T644>, $T2 := Int
        (attempting type variable $T2 := Array<$T644>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T644> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T644> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T645, $T646) -> $T645)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T646] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int64})
        ($T646 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int64
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T645 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T648, $T647) -> $T647)
        ($T2 literal=3 involves_type_vars=[$T648] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int64})
        ($T648 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T647 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T648] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T648 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T648] bindings={})
            ($T648 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T648 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T648 := Int
              (attempting type variable $T648 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T648 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T649, $T650) -> $T649)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T650] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int64})
        ($T650 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int64
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T649 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T651, $T651) -> $T651)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T651 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T651 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T652, $T652) -> $T652)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T652 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T653, $T653.Scalar) -> $T653)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T653 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T654.Scalar, $T654) -> $T654)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T654 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv Int64 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T655.Scalar, $T655) -> $T655)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64, $T4 := String
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T655 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T655 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T656, $T656.Scalar) -> $T656)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) Int64})
        Initial bindings: $T4 := Int64
        (attempting type variable $T4 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T656 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (UInt, UInt) -> UInt)
    ---Constraint graph---
  $T0:

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T5:
    Constraints:
      $T5 operator arg conv UInt [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:

---Connected components---
  0: $T1 $T2 $T3 $T4
  1: $T5
    (solving component #1
      ($T5 bindings={(subtypes of) UInt})
      Initial bindings: $T5 := UInt
      (attempting type variable $T5 := UInt
        (increasing score due to non-default literal)
        (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
      )
    finished component #1)
    (solving component #0
      ($T2 delayed literal=3 bindings={})
      ($T3 delayed literal=3 bindings={})
      ($T4 delayed bindings={(subtypes of) UInt})
      (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (String, String) -> String)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 bindings={(subtypes of) String})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 literal=3 bindings={(subtypes of) String})
          Initial bindings: $T2 := String, $T2 := Int
          (attempting type variable $T2 := String
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
          (attempting type variable $T2 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        failed component #0)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int, Int) -> Int)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt, UInt) -> UInt)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T3 := UInt, $T3 := String
          (attempting type variable $T3 := UInt
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        finished component #1)
        (solving component #0
          ($T2 bindings={(subtypes of) UInt})
          Initial bindings: $T2 := UInt
          (attempting type variable $T2 := UInt
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        finished component #0)
          (solution is worse than the best solution)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float16, Float16) -> Float16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float16})
          Initial bindings: $T3 := Float16, $T3 := String
          (attempting type variable $T3 := Float16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Float, Float) -> Float)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Float})
          Initial bindings: $T3 := Float, $T3 := String
          (attempting type variable $T3 := Float
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Double, Double) -> Double)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt8})
          Initial bindings: $T3 := UInt8, $T3 := String
          (attempting type variable $T3 := UInt8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int8, Int8) -> Int8)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int8})
          Initial bindings: $T3 := Int8, $T3 := String
          (attempting type variable $T3 := Int8
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt16})
          Initial bindings: $T3 := UInt16, $T3 := String
          (attempting type variable $T3 := UInt16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int16, Int16) -> Int16)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int16})
          Initial bindings: $T3 := Int16, $T3 := String
          (attempting type variable $T3 := Int16
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt32})
          Initial bindings: $T3 := UInt32, $T3 := String
          (attempting type variable $T3 := UInt32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int32, Int32) -> Int32)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int32})
          Initial bindings: $T3 := Int32, $T3 := String
          (attempting type variable $T3 := Int32
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) UInt64})
          Initial bindings: $T3 := UInt64, $T3 := String
          (attempting type variable $T3 := UInt64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Int64, Int64) -> Int64)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:

---Connected components---
  0: $T2
  1: $T3
        (solving component #1
          ($T3 literal=3 bindings={(subtypes of) Int64})
          Initial bindings: $T3 := Int64, $T3 := String
          (attempting type variable $T3 := Int64
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        failed component #1)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T657, $T657) -> $T657)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          ($T2 bindings={(subtypes of) UInt})
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T2 := UInt
          (attempting type variable $T2 := UInt
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt})
            Initial bindings: $T3 := UInt, $T3 := String
            (attempting type variable $T3 := UInt
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T657 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T657 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T658, $T658.Stride) -> $T658)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T658 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T659.Stride, $T659) -> $T659)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T659 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T659 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T660, String) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := (String, $T661) -> Never)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T662, $T662) -> $T662)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T662 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T662 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T663, $T663) -> $T663)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          ($T2 bindings={(subtypes of) UInt})
          ($T3 literal=3 bindings={(subtypes of) UInt})
          Initial bindings: $T2 := UInt
          (attempting type variable $T2 := UInt
            (increasing score due to non-default literal)
            ($T3 literal=3 bindings={(subtypes of) UInt})
            Initial bindings: $T3 := UInt, $T3 := String
            (attempting type variable $T3 := UInt
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T663 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T663 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := (Array<$T664>, Array<$T664>) -> Array<$T664>)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T2 literal=3 involves_type_vars=[$T664] bindings={(subtypes of) Array<$T664>})
        ($T3 literal=3 involves_type_vars=[$T664] bindings={(subtypes of) Array<$T664>})
        ($T664 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T664>, $T2 := Int
        (attempting type variable $T2 := Array<$T664>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T664> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T664> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T665, $T666) -> $T665)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T666] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt})
        ($T666 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := UInt
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T665 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T668, $T667) -> $T667)
        ($T2 literal=3 involves_type_vars=[$T668] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt})
        ($T668 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T667 conforms to RangeReplaceableCollection [[locator@0x12682c858 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T668] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T668 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T668] bindings={})
            ($T668 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T668 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T668 := Int
              (attempting type variable $T668 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T668 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T669, $T670) -> $T669)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T670] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt})
        ($T670 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := UInt
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T669 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T671, $T671) -> $T671)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T671 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T671 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T672, $T672) -> $T672)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T672 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T673, $T673.Scalar) -> $T673)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T673 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (increasing score due to use of an unavailable declaration)
        (overload set choice binding $T1 := ($T674.Scalar, $T674) -> $T674)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T674 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv UInt [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T675.Scalar, $T675) -> $T675)
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt, $T4 := String
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T675 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T675 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
        (overload set choice binding $T1 := ($T676, $T676.Scalar) -> $T676)
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T2] bindings={(subtypes of) UInt})
        Initial bindings: $T4 := UInt
        (attempting type variable $T4 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T676 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T677, $T677) -> $T677)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 literal=3 involves_type_vars=[$T5] bindings={(supertypes of) String})
        Initial bindings: $T6 := String, $T6 := Int
        (attempting type variable $T6 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T6 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T5 bindings={(subtypes of) Int})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        )
        (attempting type variable $T6 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T5 bindings={(subtypes of) Double})
          Initial bindings: $T5 := Double
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
        Initial bindings: $T6 := Int
        (attempting type variable $T6 := Int
          ($T5 bindings={(subtypes of) Int})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (composed solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Float16})
        Initial bindings: $T6 := Float16
        (attempting type variable $T6 := Float16
          ($T5 bindings={(subtypes of) Float16})
          Initial bindings: $T5 := Float16
          (attempting type variable $T5 := Float16
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Float})
        Initial bindings: $T6 := Float
        (attempting type variable $T6 := Float
          ($T5 bindings={(subtypes of) Float})
          Initial bindings: $T5 := Float
          (attempting type variable $T5 := Float
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
        Initial bindings: $T6 := Double
        (attempting type variable $T6 := Double
          ($T5 bindings={(subtypes of) Double})
          Initial bindings: $T5 := Double
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt8})
        Initial bindings: $T6 := UInt8
        (attempting type variable $T6 := UInt8
          ($T5 bindings={(subtypes of) UInt8})
          Initial bindings: $T5 := UInt8
          (attempting type variable $T5 := UInt8
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int8})
        Initial bindings: $T6 := Int8
        (attempting type variable $T6 := Int8
          ($T5 bindings={(subtypes of) Int8})
          Initial bindings: $T5 := Int8
          (attempting type variable $T5 := Int8
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt16})
        Initial bindings: $T6 := UInt16
        (attempting type variable $T6 := UInt16
          ($T5 bindings={(subtypes of) UInt16})
          Initial bindings: $T5 := UInt16
          (attempting type variable $T5 := UInt16
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int16})
        Initial bindings: $T6 := Int16
        (attempting type variable $T6 := Int16
          ($T5 bindings={(subtypes of) Int16})
          Initial bindings: $T5 := Int16
          (attempting type variable $T5 := Int16
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt32})
        Initial bindings: $T6 := UInt32
        (attempting type variable $T6 := UInt32
          ($T5 bindings={(subtypes of) UInt32})
          Initial bindings: $T5 := UInt32
          (attempting type variable $T5 := UInt32
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int32})
        Initial bindings: $T6 := Int32
        (attempting type variable $T6 := Int32
          ($T5 bindings={(subtypes of) Int32})
          Initial bindings: $T5 := Int32
          (attempting type variable $T5 := Int32
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt64})
        Initial bindings: $T6 := UInt64
        (attempting type variable $T6 := UInt64
          ($T5 bindings={(subtypes of) UInt64})
          Initial bindings: $T5 := UInt64
          (attempting type variable $T5 := UInt64
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int64})
        Initial bindings: $T6 := Int64
        (attempting type variable $T6 := Int64
          ($T5 bindings={(subtypes of) Int64})
          Initial bindings: $T5 := Int64
          (attempting type variable $T5 := Int64
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt})
        Initial bindings: $T6 := UInt
        (attempting type variable $T6 := UInt
          ($T5 bindings={(subtypes of) UInt})
          Initial bindings: $T5 := UInt
          (attempting type variable $T5 := UInt
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T678, $T678) -> $T678)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              ($T5 bindings={(subtypes of) Int})
              Initial bindings: $T5 := Int
              (attempting type variable $T5 := Int
                (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
              )
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T678 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T678 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T678 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T679, $T679.Stride) -> $T679)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T679 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T679 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T680.Stride, $T680) -> $T680)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T680 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T681, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:
    References: $T681

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T681 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T681:
    Constraints:
      $T681 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T681.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T681 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T1 $T2 $T681
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T681] bindings={})
        ($T681 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T681 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T681 := Int
          (attempting type variable $T681 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T681 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T681 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T681 := Double
          (attempting type variable $T681 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T681 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T682) -> Never)
      ---Constraint graph---
  $T0:
    References: $T677

  $T1:
    References: $T682

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T682 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Equivalence class: $T677

  $T677:
    Constraints:
      $T677 conforms to AdditiveArithmetic [[locator@0x126881b78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T677 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T677 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T682:
    Constraints:
      $T682 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T682.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T682 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T677
  1: $T1 $T3 $T682
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T683, $T683) -> $T683)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T683 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T683 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T683 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T683 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T684, $T684) -> $T684)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              ($T5 bindings={(subtypes of) Int})
              Initial bindings: $T5 := Int
              (attempting type variable $T5 := Int
                (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
              )
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T684 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T684 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T684 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T685>, Array<$T685>) -> Array<$T685>)
      ($T2 literal=3 involves_type_vars=[$T685] bindings={(subtypes of) Array<$T685>})
      ($T3 literal=3 involves_type_vars=[$T685] bindings={(subtypes of) Array<$T685>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T6 literal=3 involves_type_vars=[$T685 $T5] bindings={(supertypes of) Array<$T685>})
      ($T685 hole potentially_incomplete involves_type_vars=[$T3 $T6 $T2] #defaultable_bindings=1 bindings={})
      Initial bindings: $T2 := Array<$T685>, $T2 := Int
      (attempting type variable $T2 := Array<$T685>
        (increasing score due to non-default literal)
        (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
      )
      (attempting type variable $T2 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T3 literal=3 bindings={(subtypes of) Array<Int>})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 literal=3 involves_type_vars=[$T5] bindings={(supertypes of) Array<Int>})
        Initial bindings: $T3 := Array<Int>, $T3 := String
        (attempting type variable $T3 := Array<Int>
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Array<$T685> [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
        (attempting type variable $T3 := [$T686]
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T2 operator arg conv Array<$T685> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T687, $T688) -> $T687)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T688] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T688 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T688] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T688 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T687 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T688] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T688 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T687 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T690, $T689) -> $T689)
      ($T2 literal=3 involves_type_vars=[$T690] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T690 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T690 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T690 := Int
        (attempting type variable $T690 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T690 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T690 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T690 := Double
        (attempting type variable $T690 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T690 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T691, $T692) -> $T691)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T692] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T692 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T692] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T692 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T691 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T692] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T692 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T691 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T693, $T693) -> $T693)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T693 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T693 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T693 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T693 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T694, $T694) -> $T694)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T694 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T694 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T694 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T694 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T695, $T695.Scalar) -> $T695)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T695 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T695 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T696.Scalar, $T696) -> $T696)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T696 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T697.Scalar, $T697) -> $T697)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T697 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T698, $T698.Scalar) -> $T698)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T698 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T698 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T699, $T699.Stride) -> $T699)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) String})
        Initial bindings: $T6 := String
        (attempting type variable $T6 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Int})
        Initial bindings: $T6 := Int
        (attempting type variable $T6 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Float16})
        Initial bindings: $T6 := Float16
        (attempting type variable $T6 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Float})
        Initial bindings: $T6 := Float
        (attempting type variable $T6 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Double})
        Initial bindings: $T6 := Double
        (attempting type variable $T6 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) UInt8})
        Initial bindings: $T6 := UInt8
        (attempting type variable $T6 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Int8})
        Initial bindings: $T6 := Int8
        (attempting type variable $T6 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) UInt16})
        Initial bindings: $T6 := UInt16
        (attempting type variable $T6 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Int16})
        Initial bindings: $T6 := Int16
        (attempting type variable $T6 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) UInt32})
        Initial bindings: $T6 := UInt32
        (attempting type variable $T6 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Int32})
        Initial bindings: $T6 := Int32
        (attempting type variable $T6 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) UInt64})
        Initial bindings: $T6 := UInt64
        (attempting type variable $T6 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Int64})
        Initial bindings: $T6 := Int64
        (attempting type variable $T6 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) UInt})
        Initial bindings: $T6 := UInt
        (attempting type variable $T6 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T700, $T700.Stride) -> $T700)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T700 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T700 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T701, $T701) -> $T701)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T701 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T701 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T702.Stride, $T702) -> $T702)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T702 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T703, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:
    References: $T703

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T703 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

  $T703:
    Constraints:
      $T703 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T703.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T703 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T1 $T2 $T703
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T703] bindings={})
        ($T703 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T703 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T703 := Int
          (attempting type variable $T703 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T703 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T703 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T703 := Double
          (attempting type variable $T703 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T703 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T704) -> Never)
      ---Constraint graph---
  $T0:
    References: $T699

  $T1:
    References: $T704

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T704 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T5 operator arg conv $T6.Stride [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T699

  $T699:
    Constraints:
      $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T699 [[locator@0x13a00df78 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0 (non-ephemeral)]]];
    Referenced By: $T0

  $T704:
    Constraints:
      $T704 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T704.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T704 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T699
  1: $T1 $T3 $T704
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T705, $T705) -> $T705)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T705 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T705 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T705 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T706, $T706) -> $T706)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T706 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T706 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T706 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T707>, Array<$T707>) -> Array<$T707>)
      ($T2 literal=3 involves_type_vars=[$T707] bindings={(subtypes of) Array<$T707>})
      ($T3 literal=3 involves_type_vars=[$T707] bindings={(subtypes of) Array<$T707>})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T6 involves_type_vars=[$T707] bindings={(supertypes of) Array<$T707>})
      ($T707 hole potentially_incomplete involves_type_vars=[$T2 $T3 $T6] #defaultable_bindings=1 bindings={})
      Initial bindings: $T6 := Array<$T707>
      (attempting type variable $T6 := Array<$T707>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T699 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T708, $T709) -> $T708)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T709] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T709 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T709] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T709 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T708 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T709] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T709 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T708 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T711, $T710) -> $T710)
      ($T2 literal=3 involves_type_vars=[$T711] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T711 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T711 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T711 := Int
        (attempting type variable $T711 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T711 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T711 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T711 := Double
        (attempting type variable $T711 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T711 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T712, $T713) -> $T712)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T713] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T713 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T713] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T713 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T712 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T713] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T713 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T712 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T714, $T714) -> $T714)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T714 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T714 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T714 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T714 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T715, $T715) -> $T715)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T715 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T715 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T715 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T715 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T716, $T716.Scalar) -> $T716)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T716 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T716 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T717.Scalar, $T717) -> $T717)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T717 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T718.Scalar, $T718) -> $T718)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T718 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T719, $T719.Scalar) -> $T719)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T719 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T719 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T720.Stride, $T720) -> $T720)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T721.Stride, $T721) -> $T721)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T722, $T722) -> $T722)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T723, $T723.Stride) -> $T723)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T724, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:
    References: $T724

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T724 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

  $T724:
    Constraints:
      $T724 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T724.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T724 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T1 $T2 $T724
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T724] bindings={})
        ($T724 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T724 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T724 := Int
          (attempting type variable $T724 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T724 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T724 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T724 := Double
          (attempting type variable $T724 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T724 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T725) -> Never)
      ---Constraint graph---
  $T0:
    References: $T720

  $T1:
    References: $T725

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T725 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T4 operator arg conv $T6.Stride [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T720

  $T720:
    Constraints:
      $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T720 [[locator@0x12680e6c8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1 (non-ephemeral)]]];
    Referenced By: $T0

  $T725:
    Constraints:
      $T725 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T725.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T725 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T720
  1: $T1 $T3 $T725
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T726, $T726) -> $T726)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T727, $T727) -> $T727)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T728>, Array<$T728>) -> Array<$T728>)
      ($T2 literal=3 involves_type_vars=[$T728] bindings={(subtypes of) Array<$T728>})
      ($T3 literal=3 involves_type_vars=[$T728] bindings={(subtypes of) Array<$T728>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T728 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
      Initial bindings: $T2 := Array<$T728>, $T2 := Int
      (attempting type variable $T2 := Array<$T728>
        (increasing score due to non-default literal)
        (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
      )
      (attempting type variable $T2 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T3 literal=3 bindings={(subtypes of) Array<Int>})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := Array<Int>, $T3 := String
        (attempting type variable $T3 := Array<Int>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Array<$T728> [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
        (attempting type variable $T3 := [$T729]
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T2 operator arg conv Array<$T728> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T730, $T731) -> $T730)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T731] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T731 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T731] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T731 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T731 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T731 := String
          (attempting type variable $T731 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T731] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T731 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T731 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T731 := String
          (attempting type variable $T731 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T733, $T732) -> $T732)
      ($T2 literal=3 involves_type_vars=[$T733] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T733 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T733 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T733 := Int
        (attempting type variable $T733 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T733 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T733 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T733 := Double
        (attempting type variable $T733 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T733 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T734, $T735) -> $T734)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T735] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T735 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T735] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T735 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T735 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T735 := String
          (attempting type variable $T735 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T735] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T735 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T735 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T735 := String
          (attempting type variable $T735 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T736, $T736) -> $T736)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T737, $T737) -> $T737)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T738, $T738.Scalar) -> $T738)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T739.Scalar, $T739) -> $T739)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T740.Scalar, $T740) -> $T740)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T741, $T741.Scalar) -> $T741)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T720 conforms to _Pointer [[locator@0x13a00dd28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (increasing score due to use of an unavailable declaration)
    (overload set choice binding $T0 := ($T742, String) -> Never)
    ---Constraint graph---
  $T0:
    References: $T742

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv $T742 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv String [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

  $T742:
    Constraints:
      $T742 conforms to Sequence [[locator@0x126932be8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T742.Element bind String [[locator@0x126932ca8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T4 operator arg conv $T742 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T1 $T2 $T3 $T4 $T742
  1: $T5
    (solving component #1
      ($T5 literal=3 bindings={(subtypes of) String})
      Initial bindings: $T5 := String, $T5 := Int
      (attempting type variable $T5 := String
        (increasing score due to non-default literal)
        (failed constraint $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];)
      )
      (attempting type variable $T5 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T5 operator arg conv String [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
      )
      (attempting type variable $T5 := Double
        (increasing score due to non-default literal)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T5 operator arg conv String [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
      )
    failed component #1)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (increasing score due to use of an unavailable declaration)
    (overload set choice binding $T0 := (String, $T743) -> Never)
    ---Constraint graph---
  $T0:
    References: $T743

  $T1:
    Constraints:
      disjunction [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]]:
>  [favored]  $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>  [favored]  $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
>             $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];

  $T4:
    Constraints:
      ($T2, $T3) -> $T4 applicable fn $T1 [[locator@0x1258f0d00 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply function]]];
      $T4 operator arg conv String [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T743 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:

  $T743:
    Constraints:
      $T743 conforms to Sequence [[locator@0x126932be8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T743.Element bind String [[locator@0x126932ca8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T5 operator arg conv $T743 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  1: $T1 $T2 $T3 $T4
  0: $T0 $T5 $T743
    (solving component #0
      ($T5 literal=3 involves_type_vars=[$T743] bindings={})
      ($T743 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T5 := Int
      (attempting type variable $T5 := Int
        ($T743 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T743 := Int
        (attempting type variable $T743 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x126932be8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T743 conforms to Sequence [[locator@0x126932be8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T5 := Double
        (increasing score due to non-default literal)
        ($T743 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T743 := Double
        (attempting type variable $T743 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x126932be8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T743 conforms to Sequence [[locator@0x126932be8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    failed component #0)
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T744, $T744) -> $T744)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 literal=3 involves_type_vars=[$T5] bindings={(supertypes of) String})
        Initial bindings: $T6 := String, $T6 := Int
        (attempting type variable $T6 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T6 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T6 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T5 bindings={(subtypes of) Double})
          Initial bindings: $T5 := Double
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
        Initial bindings: $T6 := Int
        (attempting type variable $T6 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Float16})
        Initial bindings: $T6 := Float16
        (attempting type variable $T6 := Float16
          ($T5 bindings={(subtypes of) Float16})
          Initial bindings: $T5 := Float16
          (attempting type variable $T5 := Float16
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Float})
        Initial bindings: $T6 := Float
        (attempting type variable $T6 := Float
          ($T5 bindings={(subtypes of) Float})
          Initial bindings: $T5 := Float
          (attempting type variable $T5 := Float
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
        Initial bindings: $T6 := Double
        (attempting type variable $T6 := Double
          ($T5 bindings={(subtypes of) Double})
          Initial bindings: $T5 := Double
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt8})
        Initial bindings: $T6 := UInt8
        (attempting type variable $T6 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int8})
        Initial bindings: $T6 := Int8
        (attempting type variable $T6 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt16})
        Initial bindings: $T6 := UInt16
        (attempting type variable $T6 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int16})
        Initial bindings: $T6 := Int16
        (attempting type variable $T6 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt32})
        Initial bindings: $T6 := UInt32
        (attempting type variable $T6 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int32})
        Initial bindings: $T6 := Int32
        (attempting type variable $T6 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt64})
        Initial bindings: $T6 := UInt64
        (attempting type variable $T6 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int64})
        Initial bindings: $T6 := Int64
        (attempting type variable $T6 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt})
        Initial bindings: $T6 := UInt
        (attempting type variable $T6 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T745, $T745) -> $T745)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T745 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T745 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T745 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T746, $T746.Stride) -> $T746)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T746 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T746 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T747.Stride, $T747) -> $T747)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T747 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T748, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:
    References: $T748

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T748 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T748:
    Constraints:
      $T748 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T748.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T748 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T1 $T2 $T748
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T748] bindings={})
        ($T748 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T748 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T748 := Int
          (attempting type variable $T748 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T748 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T748 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T748 := Double
          (attempting type variable $T748 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T748 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T749) -> Never)
      ---Constraint graph---
  $T0:
    References: $T744

  $T1:
    References: $T749

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T749 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T744

  $T744:
    Constraints:
      $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T744 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T744 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T749:
    Constraints:
      $T749 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T749.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T749 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T744
  1: $T1 $T3 $T749
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T750, $T750) -> $T750)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T750 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T750 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T750 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T750 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T751, $T751) -> $T751)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T744 conforms to FloatingPoint [[locator@0x12686fb88 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T751 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T751 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T751 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T752>, Array<$T752>) -> Array<$T752>)
      ($T2 literal=3 involves_type_vars=[$T752] bindings={(subtypes of) Array<$T752>})
      ($T3 literal=3 involves_type_vars=[$T752] bindings={(subtypes of) Array<$T752>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T6 literal=3 involves_type_vars=[$T752 $T5] bindings={(supertypes of) Array<$T752>})
      ($T752 hole potentially_incomplete involves_type_vars=[$T2 $T3 $T6] #defaultable_bindings=1 bindings={})
      Initial bindings: $T2 := Array<$T752>, $T2 := Int
      (attempting type variable $T2 := Array<$T752>
        (increasing score due to non-default literal)
        (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
      )
      (attempting type variable $T2 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T3 literal=3 bindings={(subtypes of) Array<Int>})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 literal=3 involves_type_vars=[$T5] bindings={(supertypes of) Array<Int>})
        Initial bindings: $T3 := Array<Int>, $T3 := String
        (attempting type variable $T3 := Array<Int>
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Array<$T752> [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
        (attempting type variable $T3 := [$T753]
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T2 operator arg conv Array<$T752> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T754, $T755) -> $T754)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T755] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T755 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T755] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T755 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T754 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T755] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T755 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T754 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T757, $T756) -> $T756)
      ($T2 literal=3 involves_type_vars=[$T757] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T757 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T757 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T757 := Int
        (attempting type variable $T757 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T757 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T757 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T757 := Double
        (attempting type variable $T757 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T757 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T758, $T759) -> $T758)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T759] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T759 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T759] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T759 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T758 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T759] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T759 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T758 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T760, $T760) -> $T760)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T760 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T760 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T760 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T760 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T761, $T761) -> $T761)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T761 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T761 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T761 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T761 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T762, $T762.Scalar) -> $T762)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T762 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T762 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T763.Scalar, $T763) -> $T763)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T763 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T764.Scalar, $T764) -> $T764)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T764 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T765, $T765.Scalar) -> $T765)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T765 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T765 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T766, $T766) -> $T766)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 literal=3 involves_type_vars=[$T5] bindings={(supertypes of) String})
        Initial bindings: $T6 := String, $T6 := Int
        (attempting type variable $T6 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T6 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T5 bindings={(subtypes of) Int})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        )
        (attempting type variable $T6 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
        Initial bindings: $T6 := Int
        (attempting type variable $T6 := Int
          ($T5 bindings={(subtypes of) Int})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (composed solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Float16})
        Initial bindings: $T6 := Float16
        (attempting type variable $T6 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Float})
        Initial bindings: $T6 := Float
        (attempting type variable $T6 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
        Initial bindings: $T6 := Double
        (attempting type variable $T6 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt8})
        Initial bindings: $T6 := UInt8
        (attempting type variable $T6 := UInt8
          ($T5 bindings={(subtypes of) UInt8})
          Initial bindings: $T5 := UInt8
          (attempting type variable $T5 := UInt8
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int8})
        Initial bindings: $T6 := Int8
        (attempting type variable $T6 := Int8
          ($T5 bindings={(subtypes of) Int8})
          Initial bindings: $T5 := Int8
          (attempting type variable $T5 := Int8
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt16})
        Initial bindings: $T6 := UInt16
        (attempting type variable $T6 := UInt16
          ($T5 bindings={(subtypes of) UInt16})
          Initial bindings: $T5 := UInt16
          (attempting type variable $T5 := UInt16
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int16})
        Initial bindings: $T6 := Int16
        (attempting type variable $T6 := Int16
          ($T5 bindings={(subtypes of) Int16})
          Initial bindings: $T5 := Int16
          (attempting type variable $T5 := Int16
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt32})
        Initial bindings: $T6 := UInt32
        (attempting type variable $T6 := UInt32
          ($T5 bindings={(subtypes of) UInt32})
          Initial bindings: $T5 := UInt32
          (attempting type variable $T5 := UInt32
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int32})
        Initial bindings: $T6 := Int32
        (attempting type variable $T6 := Int32
          ($T5 bindings={(subtypes of) Int32})
          Initial bindings: $T5 := Int32
          (attempting type variable $T5 := Int32
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt64})
        Initial bindings: $T6 := UInt64
        (attempting type variable $T6 := UInt64
          ($T5 bindings={(subtypes of) UInt64})
          Initial bindings: $T5 := UInt64
          (attempting type variable $T5 := UInt64
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int64})
        Initial bindings: $T6 := Int64
        (attempting type variable $T6 := Int64
          ($T5 bindings={(subtypes of) Int64})
          Initial bindings: $T5 := Int64
          (attempting type variable $T5 := Int64
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt})
        Initial bindings: $T6 := UInt
        (attempting type variable $T6 := UInt
          ($T5 bindings={(subtypes of) UInt})
          Initial bindings: $T5 := UInt
          (attempting type variable $T5 := UInt
            (increasing score due to non-default literal)
            (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
          )
        )
      finished component #0)
        (solution is worse than the best solution)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T767, $T767) -> $T767)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              ($T5 bindings={(subtypes of) Int})
              Initial bindings: $T5 := Int
              (attempting type variable $T5 := Int
                (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
              )
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T767 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T767 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T767 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T768, $T768.Stride) -> $T768)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T768 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T768 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T769.Stride, $T769) -> $T769)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T769 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T770, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:
    References: $T770

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T770 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T770:
    Constraints:
      $T770 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T770.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T770 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T1 $T2 $T770
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T770] bindings={})
        ($T770 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T770 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T770 := Int
          (attempting type variable $T770 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T770 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T770 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T770 := Double
          (attempting type variable $T770 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T770 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T771) -> Never)
      ---Constraint graph---
  $T0:
    References: $T766

  $T1:
    References: $T771

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T771 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Equivalence class: $T766

  $T766:
    Constraints:
      $T766 conforms to BinaryInteger [[locator@0x13981db78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T766 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T766 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T771:
    Constraints:
      $T771 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T771.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T771 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T766
  1: $T1 $T3 $T771
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T772, $T772) -> $T772)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              ($T5 bindings={(subtypes of) Int})
              Initial bindings: $T5 := Int
              (attempting type variable $T5 := Int
                (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
              )
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T772 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T772 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T772 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T773, $T773) -> $T773)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T773 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T773 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T773 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T773 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T774>, Array<$T774>) -> Array<$T774>)
      ($T2 literal=3 involves_type_vars=[$T774] bindings={(subtypes of) Array<$T774>})
      ($T3 literal=3 involves_type_vars=[$T774] bindings={(subtypes of) Array<$T774>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T6 literal=3 involves_type_vars=[$T774 $T5] bindings={(supertypes of) Array<$T774>})
      ($T774 hole potentially_incomplete involves_type_vars=[$T3 $T2 $T6] #defaultable_bindings=1 bindings={})
      Initial bindings: $T2 := Array<$T774>, $T2 := Int
      (attempting type variable $T2 := Array<$T774>
        (increasing score due to non-default literal)
        (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
      )
      (attempting type variable $T2 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T3 literal=3 bindings={(subtypes of) Array<Int>})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 literal=3 involves_type_vars=[$T5] bindings={(supertypes of) Array<Int>})
        Initial bindings: $T3 := Array<Int>, $T3 := String
        (attempting type variable $T3 := Array<Int>
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Array<$T774> [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
        (attempting type variable $T3 := [$T775]
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T2 operator arg conv Array<$T774> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T776, $T777) -> $T776)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T777] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T777 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T777] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T777 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T776 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T777] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T777 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T776 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T779, $T778) -> $T778)
      ($T2 literal=3 involves_type_vars=[$T779] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T779 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T779 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T779 := Int
        (attempting type variable $T779 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T779 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T779 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T779 := Double
        (attempting type variable $T779 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T779 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T780, $T781) -> $T780)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T781] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T781 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T781] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T781 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T780 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T781] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T781 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T780 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T782, $T782) -> $T782)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T782 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T782 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T782 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T782 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T783, $T783) -> $T783)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T783 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T783 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T783 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T783 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T784, $T784.Scalar) -> $T784)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T784 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T784 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T785.Scalar, $T785) -> $T785)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T785 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T786.Scalar, $T786) -> $T786)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T786 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T787, $T787.Scalar) -> $T787)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T787 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T787 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := (Array<$T788>, Array<$T788>) -> Array<$T788>)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T4 delayed involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
    ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
    ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      ---Constraint graph---
  $T0:
    References: $T788

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T789, $T789) -> $T789)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T2 $T3] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := Int, $T4 := String
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T789 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T0:
    References: $T788

  $T1:
    References: $T789

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T789 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T789 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Equivalence class: $T789

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

  $T789:
    Constraints:
      $T2 operator arg conv $T789 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T3 operator arg conv $T789 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T1 $T2 $T3 $T4 $T789
        (solving component #1
          ($T2 bindings={(subtypes of) Int})
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T2 := Int
          (attempting type variable $T2 := Int
            ($T3 literal=3 bindings={(subtypes of) Int})
            Initial bindings: $T3 := Int, $T3 := String
            (attempting type variable $T3 := Int
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T789 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        failed component #1)
      )
      (attempting type variable $T4 := String
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T789 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Double
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T0:
    References: $T788

  $T1:
    References: $T789

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T789 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T789 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Equivalence class: $T789

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

  $T789:
    Constraints:
      $T2 operator arg conv $T789 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T3 operator arg conv $T789 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T1 $T2 $T3 $T4 $T789
        (solving component #1
          ($T2 bindings={(subtypes of) Double})
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T2 := Double
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
        failed component #1)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T790, $T790.Stride) -> $T790)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T2] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := Int
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T790 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T790 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Double
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T790 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T791.Stride, $T791) -> $T791)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T3] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := String
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T791 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := String
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T791 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T792, String) -> Never)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      (solution is worse than the best solution)
      (failed constraint $T4 operator arg conv Array<$T788> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T793) -> Never)
      (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
      (increasing score due to attempting to fix the source)
      (solution is worse than the best solution)
      (failed constraint $T4 operator arg conv Array<$T788> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T794, $T794) -> $T794)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T2 $T3] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := Int, $T4 := String
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T794 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T794 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := String
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T794 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Double
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T0:
    References: $T788

  $T1:
    References: $T794

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T794 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T794 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Equivalence class: $T794

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

  $T794:
    Constraints:
      $T2 operator arg conv $T794 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T3 operator arg conv $T794 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T1 $T2 $T3 $T4 $T794
        (solving component #1
          ($T2 bindings={(subtypes of) Double})
          ($T3 literal=3 bindings={(subtypes of) Double})
          Initial bindings: $T2 := Double
          (attempting type variable $T2 := Double
            (increasing score due to non-default literal)
            (solution is worse than the best solution)
          )
        failed component #1)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T795, $T795) -> $T795)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T3 $T2] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := Int, $T4 := String
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T795 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T0:
    References: $T788

  $T1:
    References: $T795

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T795 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T795 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Equivalence class: $T795

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

  $T795:
    Constraints:
      $T2 operator arg conv $T795 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T3 operator arg conv $T795 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T1 $T2 $T3 $T4 $T795
        (solving component #1
          ($T2 bindings={(subtypes of) Int})
          ($T3 literal=3 bindings={(subtypes of) Int})
          Initial bindings: $T2 := Int
          (attempting type variable $T2 := Int
            ($T3 literal=3 bindings={(subtypes of) Int})
            Initial bindings: $T3 := Int, $T3 := String
            (attempting type variable $T3 := Int
              (increasing score due to non-default literal)
              (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
            )
            (attempting type variable $T3 := String
              (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T3 operator arg conv $T795 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
            )
          )
        failed component #1)
      )
      (attempting type variable $T4 := String
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T795 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Double
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T795 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T796>, Array<$T796>) -> Array<$T796>)
      ($T2 literal=3 involves_type_vars=[$T796] bindings={(subtypes of) Array<$T796>})
      ($T3 literal=3 involves_type_vars=[$T796] bindings={(subtypes of) Array<$T796>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete delayed involves_type_vars=[$T5] #defaultable_bindings=1 bindings={})
      ($T796 hole potentially_incomplete delayed involves_type_vars=[$T3 $T2] #defaultable_bindings=1 bindings={})
      (attempting disjunction choice Array<$T796> bind Array<$T788> [deep equality] [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
        ($T2 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
        ($T3 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
        ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
        ($T788 hole potentially_incomplete involves_type_vars=[$T3 $T2 $T5] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T788>, $T2 := Int
        (attempting type variable $T2 := Array<$T788>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T3 literal=3 bindings={(subtypes of) Array<Int>})
          ($T5 literal=3 bindings={(subtypes of) Array<Int>})
          Initial bindings: $T3 := Array<Int>, $T3 := String
          (attempting type variable $T3 := Array<Int>
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Array<$T796> [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
          (attempting type variable $T3 := [$T797]
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T796> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting disjunction choice Array<$T796> operator arg conv Array<$T788> [array-upcast] [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
        (increasing score due to collection upcast conversion)
        ($T2 literal=3 involves_type_vars=[$T796] bindings={(subtypes of) Array<$T796>})
        ($T3 literal=3 involves_type_vars=[$T796] bindings={(subtypes of) Array<$T796>})
        ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
        ($T788 hole potentially_incomplete involves_type_vars=[$T796 $T5] #defaultable_bindings=1 bindings={})
        ($T796 hole potentially_incomplete involves_type_vars=[$T3 $T788 $T2] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T796>, $T2 := Int
        (attempting type variable $T2 := Array<$T796>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T796> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T796> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T798, $T799) -> $T798)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T799] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T2] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      ($T799 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := Int
      (attempting type variable $T4 := Array<$T788>
        ($T2 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
        ($T3 literal=3 involves_type_vars=[$T799] bindings={})
        ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
        ($T788 hole potentially_incomplete delayed involves_type_vars=[$T799 $T5] #defaultable_bindings=1 bindings={})
        ($T799 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T2 := Array<$T788>, $T2 := Int
        (attempting type variable $T2 := Array<$T788>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T3 literal=3 involves_type_vars=[$T799] bindings={})
          ($T5 literal=3 bindings={(subtypes of) Array<Int>})
          ($T799 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
          Initial bindings: $T5 := Array<Int>, $T5 := Int
          (attempting type variable $T5 := Array<Int>
            (increasing score due to non-default literal)
            (failed constraint $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];)
          )
          (attempting type variable $T5 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
          (attempting type variable $T5 := [$T800]
            (increasing score due to non-default literal)
            (failed constraint $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];)
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T798 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T4 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T798 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Double
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T798 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T802, $T801) -> $T801)
      ($T2 literal=3 involves_type_vars=[$T802] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T3] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      ($T802 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := String
      (attempting type variable $T4 := Array<$T788>
        ($T2 literal=3 involves_type_vars=[$T802] bindings={})
        ($T3 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
        ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
        ($T788 hole potentially_incomplete delayed involves_type_vars=[$T802 $T5] #defaultable_bindings=1 bindings={})
        ($T802 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T3 := Array<$T788>, $T3 := String
        (attempting type variable $T3 := Array<$T788>
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          ($T2 literal=3 involves_type_vars=[$T802] bindings={})
          ($T5 literal=3 bindings={(subtypes of) Array<String>})
          ($T802 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T5 := Array<String>, $T5 := Int
          (attempting type variable $T5 := Array<String>
            (increasing score due to non-default literal)
            (failed constraint $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];)
          )
          (attempting type variable $T5 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
          (attempting type variable $T5 := [$T803]
            (increasing score due to non-default literal)
            (failed constraint $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];)
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
      )
      (attempting type variable $T4 := String
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ---Constraint graph---
  $T0:
    References: $T788

  $T1:
    References: $T801, $T802

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T802 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T801 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Equivalence class: $T801

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    References: $T788

  $T788:
    Constraints:
      $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0, $T6

  $T801:
    Constraints:
      $T3 operator arg conv $T801 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

  $T802:
    Constraints:
      $T802 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T2 operator arg conv $T802 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      String.Element bind $T802.Element [[locator@0x12682c9d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T5 $T6 $T788
  1: $T1 $T2 $T3 $T4 $T801 $T802
        (solving component #1
          ($T2 literal=3 involves_type_vars=[$T802] bindings={})
          ($T3 bindings={(subtypes of) String})
          ($T802 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
          Initial bindings: $T3 := String
          (attempting type variable $T3 := String
            ($T2 literal=3 involves_type_vars=[$T802] bindings={})
            ($T802 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T802 potentially_incomplete bindings={(supertypes of) Int})
              Initial bindings: $T802 := Int
              (attempting type variable $T802 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T802 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
              )
            )
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          )
        failed component #1)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T804, $T805) -> $T804)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T805] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T2] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      ($T805 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := Int
      (attempting type variable $T4 := Array<$T788>
        ($T2 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
        ($T3 literal=3 involves_type_vars=[$T805] bindings={})
        ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
        ($T788 hole potentially_incomplete delayed involves_type_vars=[$T805 $T5] #defaultable_bindings=1 bindings={})
        ($T805 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T2 := Array<$T788>, $T2 := Int
        (attempting type variable $T2 := Array<$T788>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T3 literal=3 involves_type_vars=[$T805] bindings={})
          ($T5 literal=3 bindings={(subtypes of) Array<Int>})
          ($T805 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
          Initial bindings: $T5 := Array<Int>, $T5 := Int
          (attempting type variable $T5 := Array<Int>
            (increasing score due to non-default literal)
            (failed constraint $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];)
          )
          (attempting type variable $T5 := Int
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
          (attempting type variable $T5 := [$T806]
            (increasing score due to non-default literal)
            (failed constraint $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];)
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T5 operator arg conv Array<$T788> [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T804 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T4 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T804 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Double
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T804 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T807, $T807) -> $T807)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T3 $T2] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := Int, $T4 := String
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T807 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T807 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := String
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T807 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Double
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T807 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T808, $T808) -> $T808)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T2 $T3] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := Int, $T4 := String
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T808 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Array<$T788> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := String
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Array<$T788> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := Double
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Array<$T788> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T809, $T809.Scalar) -> $T809)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T2] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := Int
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T809 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Array<$T788> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T4 := Double
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Array<$T788> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T810.Scalar, $T810) -> $T810)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T3] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := String
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T810 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := String
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T4 operator arg conv Array<$T788> [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T811.Scalar, $T811) -> $T811)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T3] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := String
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T811 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := String
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T811 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T812, $T812.Scalar) -> $T812)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T4 literal=3 involves_type_vars=[$T788 $T2] bindings={(subtypes of) Array<$T788>})
      ($T5 literal=3 involves_type_vars=[$T788] bindings={(subtypes of) Array<$T788>})
      ($T788 hole potentially_incomplete involves_type_vars=[$T4 $T5] #defaultable_bindings=1 bindings={})
      Initial bindings: $T4 := Array<$T788>, $T4 := Int
      (attempting type variable $T4 := Array<$T788>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T812 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T812 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
      (attempting type variable $T4 := Double
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T812 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T813, $T814) -> $T813)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T814] bindings={})
    ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) String})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := String
        (attempting type variable $T6 := String
          ($T5 literal=3 involves_type_vars=[$T814] bindings={})
          ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T814 potentially_incomplete bindings={(supertypes of) Int})
            Initial bindings: $T814 := Int
            (attempting type variable $T814 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T814 potentially_incomplete bindings={(supertypes of) Double})
            Initial bindings: $T814 := Double
            (attempting type variable $T814 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
            )
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) Int})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Int
        (attempting type variable $T6 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) Float16})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Float16
        (attempting type variable $T6 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) Float})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Float
        (attempting type variable $T6 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) Double})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Double
        (attempting type variable $T6 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) UInt8})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := UInt8
        (attempting type variable $T6 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) Int8})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Int8
        (attempting type variable $T6 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) UInt16})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := UInt16
        (attempting type variable $T6 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) Int16})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Int16
        (attempting type variable $T6 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) UInt32})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := UInt32
        (attempting type variable $T6 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) Int32})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Int32
        (attempting type variable $T6 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) UInt64})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := UInt64
        (attempting type variable $T6 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) Int64})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Int64
        (attempting type variable $T6 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T6 bindings={(supertypes of) UInt})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := UInt
        (attempting type variable $T6 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T815, $T815) -> $T815)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T814] bindings={})
          ($T6 bindings={(supertypes of) Int})
          ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T815 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T814] bindings={})
          ($T6 bindings={(supertypes of) Double})
          ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T815 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T816, $T816.Stride) -> $T816)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T816 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T816 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T817.Stride, $T817) -> $T817)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T817 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T818, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:
    References: $T818

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T818 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

  $T818:
    Constraints:
      $T818 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T818.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T818 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T1 $T2 $T818
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T818] bindings={})
        ($T818 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T818 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T818 := Int
          (attempting type variable $T818 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T818 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T818 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T818 := Double
          (attempting type variable $T818 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T818 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T819) -> Never)
      ---Constraint graph---
  $T0:
    References: $T813, $T814

  $T1:
    References: $T819

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T819 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T813

  $T813:
    Constraints:
      $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T813 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T814:
    Constraints:
      $T814 conforms to Sequence [[locator@0x126898288 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T814 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T814.Element [[locator@0x126898368 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

  $T819:
    Constraints:
      $T819 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T819.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T819 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T813 $T814
  1: $T1 $T3 $T819
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T820, $T820) -> $T820)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T820 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T820 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T814] bindings={})
          ($T6 bindings={(supertypes of) Double})
          ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T820 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T821, $T821) -> $T821)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T814] bindings={})
          ($T6 bindings={(supertypes of) Int})
          ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T813 conforms to RangeReplaceableCollection [[locator@0x1268981e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T821 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T821 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T821 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T822>, Array<$T822>) -> Array<$T822>)
      ($T2 literal=3 involves_type_vars=[$T822] bindings={(subtypes of) Array<$T822>})
      ($T3 literal=3 involves_type_vars=[$T822] bindings={(subtypes of) Array<$T822>})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T6 involves_type_vars=[$T822] bindings={(supertypes of) Array<$T822>})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      ($T822 hole potentially_incomplete involves_type_vars=[$T6 $T3 $T2] #defaultable_bindings=1 bindings={})
      Initial bindings: $T6 := Array<$T822>
      (attempting type variable $T6 := Array<$T822>
        ($T2 literal=3 involves_type_vars=[$T822] bindings={(subtypes of) Array<$T822>})
        ($T3 literal=3 involves_type_vars=[$T822] bindings={(subtypes of) Array<$T822>})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T822 hole potentially_incomplete delayed involves_type_vars=[$T814 $T3 $T2] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T822>, $T2 := Int
        (attempting type variable $T2 := Array<$T822>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T3 literal=3 bindings={(subtypes of) Array<Int>})
          ($T5 literal=3 involves_type_vars=[$T814] bindings={})
          ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T3 := Array<Int>, $T3 := String
          (attempting type variable $T3 := Array<Int>
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Array<$T822> [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
          (attempting type variable $T3 := [$T823]
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T822> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T824, $T825) -> $T824)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T825] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      ($T825 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T825] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T825 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T824 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T825] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T825 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T824 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T827, $T826) -> $T826)
      ($T2 literal=3 involves_type_vars=[$T827] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      ($T827 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T827 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T827 := Int
        (attempting type variable $T827 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T827 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T827 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T827 := Double
        (attempting type variable $T827 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T827 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T828, $T829) -> $T828)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T829] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      ($T829 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T829] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T829 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T828 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T829] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T829 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T828 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T830, $T830) -> $T830)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T830 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T830 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T830 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T830 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T831, $T831) -> $T831)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T831 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T831 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T831 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T831 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T832, $T832.Scalar) -> $T832)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T832 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T832 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T833.Scalar, $T833) -> $T833)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T833 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T834.Scalar, $T834) -> $T834)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T834 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T835, $T835.Scalar) -> $T835)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T814] bindings={})
      ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T835 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T814] bindings={})
        ($T814 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T835 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T837, $T836) -> $T836)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) String})
        Initial bindings: $T837 := String
        (attempting type variable $T837 := String
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T837 := Int
        (attempting type variable $T837 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) Float16})
        Initial bindings: $T837 := Float16
        (attempting type variable $T837 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) Float})
        Initial bindings: $T837 := Float
        (attempting type variable $T837 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T837 := Double
        (attempting type variable $T837 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) UInt8})
        Initial bindings: $T837 := UInt8
        (attempting type variable $T837 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) Int8})
        Initial bindings: $T837 := Int8
        (attempting type variable $T837 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) UInt16})
        Initial bindings: $T837 := UInt16
        (attempting type variable $T837 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) Int16})
        Initial bindings: $T837 := Int16
        (attempting type variable $T837 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) UInt32})
        Initial bindings: $T837 := UInt32
        (attempting type variable $T837 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) Int32})
        Initial bindings: $T837 := Int32
        (attempting type variable $T837 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) UInt64})
        Initial bindings: $T837 := UInt64
        (attempting type variable $T837 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) Int64})
        Initial bindings: $T837 := Int64
        (attempting type variable $T837 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete bindings={(supertypes of) UInt})
        Initial bindings: $T837 := UInt
        (attempting type variable $T837 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T838, $T838) -> $T838)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T837 := Int, $T837 := String
      (attempting type variable $T837 := Int
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T837 := String
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T838 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:
    References: $T838

  $T2:
    Constraints:
      $T2 operator arg conv $T838 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv $T838 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Equivalence class: $T838

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind String.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Referenced By: $T0

  $T838:
    Constraints:
      $T2 operator arg conv $T838 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T3 operator arg conv $T838 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T5 $T6 $T836 $T837
  1: $T1 $T2 $T3 $T4 $T838
          (solving component #1
            ($T2 bindings={(subtypes of) Int})
            ($T3 literal=3 bindings={(subtypes of) Int})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T3 literal=3 bindings={(subtypes of) Int})
              Initial bindings: $T3 := Int, $T3 := String
              (attempting type variable $T3 := Int
                (increasing score due to non-default literal)
                (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
              )
              (attempting type variable $T3 := String
                (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T3 operator arg conv $T838 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
              )
            )
          failed component #1)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:
    References: $T838

  $T2:
    Constraints:
      $T2 operator arg conv $T838 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv $T838 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Equivalence class: $T838

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind String.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Referenced By: $T0

  $T838:
    Constraints:
      $T2 operator arg conv $T838 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T3 operator arg conv $T838 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T5 $T6 $T836 $T837
  1: $T1 $T2 $T3 $T4 $T838
          (solving component #1
            ($T2 bindings={(subtypes of) Double})
            ($T3 literal=3 bindings={(subtypes of) Double})
            Initial bindings: $T2 := Double
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          failed component #1)
        )
      )
      (attempting type variable $T837 := Double
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T839, $T839.Stride) -> $T839)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T839 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T839 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T840.Stride, $T840) -> $T840)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T840 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T841, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:
    References: $T841

  $T2:
    Constraints:
      $T2 operator arg conv $T841 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

  $T841:
    Constraints:
      $T841 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T841.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T841 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T1 $T2 $T841
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T841] bindings={})
        ($T841 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T841 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T841 := Int
          (attempting type variable $T841 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T841 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T841 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T841 := Double
          (attempting type variable $T841 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T841 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T842) -> Never)
      ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:
    References: $T842

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv $T842 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Constraints:
      $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T6.Element bind $T837.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

  $T842:
    Constraints:
      $T842 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T842.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T842 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T836 $T837
  1: $T1 $T3 $T842
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T843, $T843) -> $T843)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T837 := Int, $T837 := String
      (attempting type variable $T837 := Int
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T837 := String
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T843 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T843 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:
    References: $T843

  $T2:
    Constraints:
      $T2 operator arg conv $T843 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv $T843 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Equivalence class: $T843

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind String.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Referenced By: $T0

  $T843:
    Constraints:
      $T2 operator arg conv $T843 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T3 operator arg conv $T843 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T5 $T6 $T836 $T837
  1: $T1 $T2 $T3 $T4 $T843
          (solving component #1
            ($T2 bindings={(subtypes of) Double})
            ($T3 literal=3 bindings={(subtypes of) Double})
            Initial bindings: $T2 := Double
            (attempting type variable $T2 := Double
              (increasing score due to non-default literal)
              (solution is worse than the best solution)
            )
          failed component #1)
        )
      )
      (attempting type variable $T837 := Double
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T844, $T844) -> $T844)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T837 := Int, $T837 := String
      (attempting type variable $T837 := Int
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T837 := String
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T844 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ---Constraint graph---
  $T0:
    References: $T836, $T837

  $T1:
    References: $T844

  $T2:
    Constraints:
      $T2 operator arg conv $T844 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv $T844 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Equivalence class: $T844

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind String.Element [[locator@0x126898988 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T836

  $T836:
    Constraints:
      $T836 conforms to RangeReplaceableCollection [[locator@0x126898808 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T836 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T837:
    Referenced By: $T0

  $T844:
    Constraints:
      $T2 operator arg conv $T844 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T3 operator arg conv $T844 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T5 $T6 $T836 $T837
  1: $T1 $T2 $T3 $T4 $T844
          (solving component #1
            ($T2 bindings={(subtypes of) Int})
            ($T3 literal=3 bindings={(subtypes of) Int})
            Initial bindings: $T2 := Int
            (attempting type variable $T2 := Int
              ($T3 literal=3 bindings={(subtypes of) Int})
              Initial bindings: $T3 := Int, $T3 := String
              (attempting type variable $T3 := Int
                (increasing score due to non-default literal)
                (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
              )
              (attempting type variable $T3 := String
                (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T3 operator arg conv $T844 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
              )
            )
          failed component #1)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T844 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T837 := Double
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T845>, Array<$T845>) -> Array<$T845>)
      ($T2 literal=3 involves_type_vars=[$T845] bindings={(subtypes of) Array<$T845>})
      ($T3 literal=3 involves_type_vars=[$T845] bindings={(subtypes of) Array<$T845>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete involves_type_vars=[$T845] bindings={(supertypes of) Array<$T845>})
      ($T845 hole potentially_incomplete involves_type_vars=[$T837 $T3 $T2] #defaultable_bindings=1 bindings={})
      Initial bindings: $T837 := Array<$T845>
      (attempting type variable $T837 := Array<$T845>
        ($T2 literal=3 involves_type_vars=[$T845] bindings={(subtypes of) Array<$T845>})
        ($T3 literal=3 involves_type_vars=[$T845] bindings={(subtypes of) Array<$T845>})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T845 hole potentially_incomplete delayed involves_type_vars=[$T6 $T3 $T2] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T845>, $T2 := Int
        (attempting type variable $T2 := Array<$T845>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T3 literal=3 bindings={(subtypes of) Array<Int>})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T3 := Array<Int>, $T3 := String
          (attempting type variable $T3 := Array<Int>
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Array<$T845> [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
          (attempting type variable $T3 := [$T846]
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T845> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T848, $T847) -> $T847)
      ($T2 literal=3 involves_type_vars=[$T848] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      ($T848 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
        ($T848 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T848 := Int
        (attempting type variable $T848 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T848 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
        ($T848 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T848 := Double
        (attempting type variable $T848 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T848 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T849, $T850) -> $T849)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T850] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      ($T850 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T850] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        ($T850 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T849 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T850] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        ($T850 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T849 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T851, $T852) -> $T851)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T852] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      ($T852 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T852] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        ($T852 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T851 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T852] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        ($T852 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T851 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T853, $T853) -> $T853)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T837 := Int, $T837 := String
      (attempting type variable $T837 := Int
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T837 := String
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T2] bindings={(subtypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T853 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T853 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T853 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T837 := Double
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T854, $T854) -> $T854)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T837 := Int, $T837 := String
      (attempting type variable $T837 := Int
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
      (attempting type variable $T837 := String
        ($T2 literal=3 involves_type_vars=[$T4] bindings={})
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T2 $T3] bindings={(subtypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String, $T4 := Int
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T854 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T4 := Double
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T4 operator arg conv $T837 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T837 := Double
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T837 conforms to Sequence [[locator@0x1268988a8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T855, $T855.Scalar) -> $T855)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T855 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T855 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T856.Scalar, $T856) -> $T856)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T856 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T857.Scalar, $T857) -> $T857)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T857 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T858, $T858.Scalar) -> $T858)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T837 potentially_incomplete literal=3 involves_type_vars=[$T4] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T858 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T837] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T837 hole potentially_incomplete involves_type_vars=[$T4] #defaultable_bindings=1 bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T858 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T859, $T860) -> $T859)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T860] bindings={})
    ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) String})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := String
        (attempting type variable $T6 := String
          ($T5 literal=3 involves_type_vars=[$T860] bindings={})
          ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T860 potentially_incomplete bindings={(supertypes of) Int})
            Initial bindings: $T860 := Int
            (attempting type variable $T860 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T860 potentially_incomplete bindings={(supertypes of) Double})
            Initial bindings: $T860 := Double
            (attempting type variable $T860 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];)
            )
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) Int})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Int
        (attempting type variable $T6 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) Float16})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Float16
        (attempting type variable $T6 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) Float})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Float
        (attempting type variable $T6 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) Double})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Double
        (attempting type variable $T6 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) UInt8})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := UInt8
        (attempting type variable $T6 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) Int8})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Int8
        (attempting type variable $T6 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) UInt16})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := UInt16
        (attempting type variable $T6 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) Int16})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Int16
        (attempting type variable $T6 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) UInt32})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := UInt32
        (attempting type variable $T6 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) Int32})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Int32
        (attempting type variable $T6 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) UInt64})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := UInt64
        (attempting type variable $T6 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) Int64})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := Int64
        (attempting type variable $T6 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T6 bindings={(supertypes of) UInt})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T6 := UInt
        (attempting type variable $T6 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T861, $T861) -> $T861)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T860] bindings={})
          ($T6 bindings={(supertypes of) Int})
          ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T861 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T860] bindings={})
          ($T6 bindings={(supertypes of) Double})
          ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T861 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T862, $T862.Stride) -> $T862)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T862 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T862 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T863.Stride, $T863) -> $T863)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T863 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T864, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:
    References: $T864

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T864 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

  $T864:
    Constraints:
      $T864 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T864.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T864 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T1 $T2 $T864
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T864] bindings={})
        ($T864 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T864 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T864 := Int
          (attempting type variable $T864 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T864 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T864 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T864 := Double
          (attempting type variable $T864 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T864 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T865) -> Never)
      ---Constraint graph---
  $T0:
    References: $T859, $T860

  $T1:
    References: $T865

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T865 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Equivalence class: $T859

  $T859:
    Constraints:
      $T4 operator arg conv $T859 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
    Referenced By: $T0

  $T860:
    Constraints:
      $T860 conforms to RangeReplaceableCollection [[locator@0x1398283e8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T860 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T6.Element bind $T860.Element [[locator@0x1398284c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #2 (same-type)]]];
    Referenced By: $T0

  $T865:
    Constraints:
      $T865 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T865.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T865 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T859 $T860
  1: $T1 $T3 $T865
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T866, $T866) -> $T866)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T866 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T866 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T860] bindings={})
          ($T6 bindings={(supertypes of) Double})
          ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T866 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T867, $T867) -> $T867)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T860] bindings={})
          ($T6 bindings={(supertypes of) Int})
          ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T859 conforms to RangeReplaceableCollection [[locator@0x139828348 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T867 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T867 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T867 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T868>, Array<$T868>) -> Array<$T868>)
      ($T2 literal=3 involves_type_vars=[$T868] bindings={(subtypes of) Array<$T868>})
      ($T3 literal=3 involves_type_vars=[$T868] bindings={(subtypes of) Array<$T868>})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T6 involves_type_vars=[$T868] bindings={(supertypes of) Array<$T868>})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      ($T868 hole potentially_incomplete involves_type_vars=[$T2 $T3 $T6] #defaultable_bindings=1 bindings={})
      Initial bindings: $T6 := Array<$T868>
      (attempting type variable $T6 := Array<$T868>
        ($T2 literal=3 involves_type_vars=[$T868] bindings={(subtypes of) Array<$T868>})
        ($T3 literal=3 involves_type_vars=[$T868] bindings={(subtypes of) Array<$T868>})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T868 hole potentially_incomplete delayed involves_type_vars=[$T860 $T2 $T3] #defaultable_bindings=1 bindings={})
        Initial bindings: $T2 := Array<$T868>, $T2 := Int
        (attempting type variable $T2 := Array<$T868>
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          ($T3 literal=3 bindings={(subtypes of) Array<Int>})
          ($T5 literal=3 involves_type_vars=[$T860] bindings={})
          ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
          Initial bindings: $T3 := Array<Int>, $T3 := String
          (attempting type variable $T3 := Array<Int>
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv Array<$T868> [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
          (attempting type variable $T3 := [$T869]
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv Array<$T868> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T870, $T871) -> $T870)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T871] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      ($T871 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T871] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T871 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T870 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T871] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T871 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T870 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T872, $T873) -> $T872)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T873] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      ($T873 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T873] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T873 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T872 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T873] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T873 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T872 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T875, $T874) -> $T874)
      ($T2 literal=3 involves_type_vars=[$T875] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      ($T875 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T875 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T875 := Int
        (attempting type variable $T875 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T875 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        ($T875 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T875 := Double
        (attempting type variable $T875 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T875 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T876, $T876) -> $T876)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T876 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T876 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T876 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T876 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T877, $T877) -> $T877)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T877 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T877 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T877 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T877 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T878, $T878.Scalar) -> $T878)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T878 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T878 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T879.Scalar, $T879) -> $T879)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T879 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T880.Scalar, $T880) -> $T880)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T880 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T881, $T881.Scalar) -> $T881)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T860] bindings={})
      ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T881 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T860] bindings={})
        ($T860 potentially_incomplete literal=3 involves_type_vars=[$T5] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T881 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T882, $T882) -> $T882)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 literal=3 involves_type_vars=[$T5] bindings={(supertypes of) String})
        Initial bindings: $T6 := String, $T6 := Int
        (attempting type variable $T6 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T6 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T6 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
        Initial bindings: $T6 := Int
        (attempting type variable $T6 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Float16})
        Initial bindings: $T6 := Float16
        (attempting type variable $T6 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Float})
        Initial bindings: $T6 := Float
        (attempting type variable $T6 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
        Initial bindings: $T6 := Double
        (attempting type variable $T6 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt8})
        Initial bindings: $T6 := UInt8
        (attempting type variable $T6 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int8})
        Initial bindings: $T6 := Int8
        (attempting type variable $T6 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt16})
        Initial bindings: $T6 := UInt16
        (attempting type variable $T6 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int16})
        Initial bindings: $T6 := Int16
        (attempting type variable $T6 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt32})
        Initial bindings: $T6 := UInt32
        (attempting type variable $T6 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int32})
        Initial bindings: $T6 := Int32
        (attempting type variable $T6 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt64})
        Initial bindings: $T6 := UInt64
        (attempting type variable $T6 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int64})
        Initial bindings: $T6 := Int64
        (attempting type variable $T6 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 involves_type_vars=[$T5] bindings={(supertypes of) UInt})
        Initial bindings: $T6 := UInt
        (attempting type variable $T6 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T883, $T883) -> $T883)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T883 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T883 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T883 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T883 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T884, $T884) -> $T884)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T884 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T884 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T884 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T885, $T885.Stride) -> $T885)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T885 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T885 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T886.Stride, $T886) -> $T886)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T886 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T887, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:
    References: $T887

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T887 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T887:
    Constraints:
      $T887 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T887.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T887 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T1 $T2 $T887
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T887] bindings={})
        ($T887 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T887 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T887 := Int
          (attempting type variable $T887 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T887 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T887 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T887 := Double
          (attempting type variable $T887 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T887 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T888) -> Never)
      ---Constraint graph---
  $T0:
    References: $T882

  $T1:
    References: $T888

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T888 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a51c8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T882

  $T882:
    Constraints:
      $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T882 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T882 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T888:
    Constraints:
      $T888 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T888.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T888 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T882
  1: $T1 $T3 $T888
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T889, $T889) -> $T889)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T889 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T889 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T889 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T889 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T890, $T890) -> $T890)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T882 conforms to SIMD [[locator@0x1268a5108 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T890 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T890 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T890 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T891>, Array<$T891>) -> Array<$T891>)
      ($T2 literal=3 involves_type_vars=[$T891] bindings={(subtypes of) Array<$T891>})
      ($T3 literal=3 involves_type_vars=[$T891] bindings={(subtypes of) Array<$T891>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T6 literal=3 involves_type_vars=[$T891 $T5] bindings={(supertypes of) Array<$T891>})
      ($T891 hole potentially_incomplete involves_type_vars=[$T2 $T3 $T6] #defaultable_bindings=1 bindings={})
      Initial bindings: $T2 := Array<$T891>, $T2 := Int
      (attempting type variable $T2 := Array<$T891>
        (increasing score due to non-default literal)
        (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
      )
      (attempting type variable $T2 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T3 literal=3 bindings={(subtypes of) Array<Int>})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 literal=3 involves_type_vars=[$T5] bindings={(supertypes of) Array<Int>})
        Initial bindings: $T3 := Array<Int>, $T3 := String
        (attempting type variable $T3 := Array<Int>
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Array<$T891> [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
        (attempting type variable $T3 := [$T892]
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T2 operator arg conv Array<$T891> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T893, $T894) -> $T893)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T894] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T894 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T894] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T894 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T893 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T894] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T894 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T893 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T896, $T895) -> $T895)
      ($T2 literal=3 involves_type_vars=[$T896] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T896 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T896 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T896 := Int
        (attempting type variable $T896 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T896 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T896 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T896 := Double
        (attempting type variable $T896 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T896 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T897, $T898) -> $T897)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T898] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T898 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T898] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T898 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T897 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T898] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T898 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T897 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T899, $T899) -> $T899)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T899 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T899 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T899 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T899 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T900, $T900.Scalar) -> $T900)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T900 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T900 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T901.Scalar, $T901) -> $T901)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T901 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T902.Scalar, $T902) -> $T902)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T902 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T903, $T903.Scalar) -> $T903)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T903 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T903 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (increasing score due to use of an unavailable declaration)
    (overload set choice binding $T0 := ($T904, $T904) -> $T904)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T905, $T905) -> $T905)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T905 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T905 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T905 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T905 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T906, $T906) -> $T906)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T906 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T906 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T906 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T906 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T907, $T907.Stride) -> $T907)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T907 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T907 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T908.Stride, $T908) -> $T908)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T908 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T909, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:
    References: $T909

  $T2:
    Constraints:
      $T2 operator arg conv $T909 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T909:
    Constraints:
      $T909 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T909.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T909 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T1 $T2 $T909
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T909] bindings={})
        ($T909 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T909 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T909 := Int
          (attempting type variable $T909 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T909 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T909 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T909 := Double
          (attempting type variable $T909 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T909 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T910) -> Never)
      ---Constraint graph---
  $T0:
    References: $T904

  $T1:
    References: $T910

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv $T910 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
    Equivalence class: $T904

  $T904:
    Constraints:
      $T904 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T904 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T5 operator arg conv $T904 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T910:
    Constraints:
      $T910 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T910.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T910 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T904
  1: $T1 $T3 $T910
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T911, $T911) -> $T911)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T911 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T911 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Double})
          Initial bindings: $T3 := Double, $T3 := String
          (attempting type variable $T3 := Double
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T911 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T911 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T912, $T912) -> $T912)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 involves_type_vars=[$T5] bindings={(supertypes of) Int})
          Initial bindings: $T3 := Int, $T3 := String
          (attempting type variable $T3 := Int
            (increasing score due to non-default literal)
            (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
          )
          (attempting type variable $T3 := String
            (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T3 operator arg conv $T912 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T912 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T912 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T912 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T913>, Array<$T913>) -> Array<$T913>)
      ($T2 literal=3 involves_type_vars=[$T913] bindings={(subtypes of) Array<$T913>})
      ($T3 literal=3 involves_type_vars=[$T913] bindings={(subtypes of) Array<$T913>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T6 literal=3 involves_type_vars=[$T913 $T5] bindings={(supertypes of) Array<$T913>})
      ($T913 hole potentially_incomplete involves_type_vars=[$T3 $T6 $T2] #defaultable_bindings=1 bindings={})
      Initial bindings: $T2 := Array<$T913>, $T2 := Int
      (attempting type variable $T2 := Array<$T913>
        (increasing score due to non-default literal)
        (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
      )
      (attempting type variable $T2 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T2 operator arg conv Array<$T913> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T2 operator arg conv Array<$T913> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T914, $T915) -> $T914)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T915] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T915 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T915] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T915 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T914 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T915] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T915 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T914 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T917, $T916) -> $T916)
      ($T2 literal=3 involves_type_vars=[$T917] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T917 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T917 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T917 := Int
        (attempting type variable $T917 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T917 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T917 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T917 := Double
        (attempting type variable $T917 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T917 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T918, $T919) -> $T918)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T919] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T919 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T919] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T919 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T918 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T919] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T919 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T918 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T920, $T920) -> $T920)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T920 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T920 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T920 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T920 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T921, $T921.Scalar) -> $T921)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T921 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T921 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T922.Scalar, $T922) -> $T922)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T922 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T923.Scalar, $T923) -> $T923)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T923 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T924, $T924.Scalar) -> $T924)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T924 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T924 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (increasing score due to use of an unavailable declaration)
    (overload set choice binding $T0 := ($T925, $T925.Scalar) -> $T925)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T926, $T926.Scalar) -> $T926)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T926 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T926 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T927, $T927) -> $T927)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T927 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T927 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T928, $T928.Stride) -> $T928)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T928 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T928 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T929.Stride, $T929) -> $T929)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T929 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T930, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:
    References: $T930

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T930 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T930:
    Constraints:
      $T930 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T930.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T930 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T1 $T2 $T930
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T930] bindings={})
        ($T930 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T930 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T930 := Int
          (attempting type variable $T930 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T930 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T930 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T930 := Double
          (attempting type variable $T930 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T930 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T931) -> Never)
      ---Constraint graph---
  $T0:
    References: $T925

  $T1:
    References: $T931

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T931 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T925

  $T925:
    Constraints:
      $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T925 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T931:
    Constraints:
      $T931 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T931.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T931 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T925
  1: $T1 $T3 $T931
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T932, $T932) -> $T932)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T932 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T932 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T932 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T933, $T933) -> $T933)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T933 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T933 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T933 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T934>, Array<$T934>) -> Array<$T934>)
      ($T2 literal=3 involves_type_vars=[$T934] bindings={(subtypes of) Array<$T934>})
      ($T3 literal=3 involves_type_vars=[$T934] bindings={(subtypes of) Array<$T934>})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T6 involves_type_vars=[$T934] bindings={(supertypes of) Array<$T934>})
      ($T934 hole potentially_incomplete involves_type_vars=[$T3 $T6 $T2] #defaultable_bindings=1 bindings={})
      Initial bindings: $T6 := Array<$T934>
      (attempting type variable $T6 := Array<$T934>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T925 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T935, $T936) -> $T935)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T936] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T936 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T936] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T936 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T935 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T936] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T936 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T935 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T938, $T937) -> $T937)
      ($T2 literal=3 involves_type_vars=[$T938] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T938 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T938 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T938 := Int
        (attempting type variable $T938 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T938 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T938 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T938 := Double
        (attempting type variable $T938 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T938 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T939, $T940) -> $T939)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T940] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T940 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T940] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T940 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T939 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T940] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T940 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T939 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T941, $T941) -> $T941)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T941 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T941 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T941 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T941 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T942, $T942) -> $T942)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T942 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T942 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T942 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T942 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T943.Scalar, $T943) -> $T943)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T943 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T944.Scalar, $T944) -> $T944)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T944 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T945, $T945.Scalar) -> $T945)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T945 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T945 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (increasing score due to use of an unavailable declaration)
    (overload set choice binding $T0 := ($T946.Scalar, $T946) -> $T946)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T947.Scalar, $T947) -> $T947)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T948, $T948) -> $T948)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T949, $T949.Stride) -> $T949)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T950.Stride, $T950) -> $T950)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T951, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:
    References: $T951

  $T2:
    Constraints:
      $T2 operator arg conv $T951 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T951:
    Constraints:
      $T951 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T951.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T951 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T1 $T2 $T951
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T951] bindings={})
        ($T951 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T951 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T951 := Int
          (attempting type variable $T951 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T951 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T951 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T951 := Double
          (attempting type variable $T951 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T951 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T952) -> Never)
      ---Constraint graph---
  $T0:
    References: $T946

  $T1:
    References: $T952

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv $T952 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FixedWidthInteger [[locator@0x120259d38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T946

  $T946:
    Constraints:
      $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T946 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T952:
    Constraints:
      $T952 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T952.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T952 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T946
  1: $T1 $T3 $T952
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T953, $T953) -> $T953)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T954, $T954) -> $T954)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T955>, Array<$T955>) -> Array<$T955>)
      ($T2 literal=3 involves_type_vars=[$T955] bindings={(subtypes of) Array<$T955>})
      ($T3 literal=3 involves_type_vars=[$T955] bindings={(subtypes of) Array<$T955>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T955 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
      Initial bindings: $T2 := Array<$T955>, $T2 := Int
      (attempting type variable $T2 := Array<$T955>
        (increasing score due to non-default literal)
        (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
      )
      (attempting type variable $T2 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T2 operator arg conv Array<$T955> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T2 operator arg conv Array<$T955> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T956, $T957) -> $T956)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T957] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T957 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T957] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T957 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T957 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T957 := String
          (attempting type variable $T957 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T957] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T957 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T957 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T957 := String
          (attempting type variable $T957 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T959, $T958) -> $T958)
      ($T2 literal=3 involves_type_vars=[$T959] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T959 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T959 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T959 := Int
        (attempting type variable $T959 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T959 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T959 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T959 := Double
        (attempting type variable $T959 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T959 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T960, $T961) -> $T960)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T961] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T961 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T961] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T961 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T961 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T961 := String
          (attempting type variable $T961 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T961] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T961 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T961 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T961 := String
          (attempting type variable $T961 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T962, $T962) -> $T962)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T963, $T963) -> $T963)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T964, $T964.Scalar) -> $T964)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T965.Scalar, $T965) -> $T965)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T966, $T966.Scalar) -> $T966)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T946 conforms to SIMD [[locator@0x120259c78 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T967.Scalar, $T967) -> $T967)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T968.Scalar, $T968) -> $T968)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T969, $T969) -> $T969)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T970, $T970.Stride) -> $T970)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T971.Stride, $T971) -> $T971)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T972, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:
    References: $T972

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv $T972 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T972:
    Constraints:
      $T972 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T972.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T972 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T1 $T2 $T972
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T972] bindings={})
        ($T972 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T972 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T972 := Int
          (attempting type variable $T972 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T972 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T972 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T972 := Double
          (attempting type variable $T972 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T972 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T973) -> Never)
      ---Constraint graph---
  $T0:
    References: $T967

  $T1:
    References: $T973

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv $T973 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T4 operator arg conv $T6.Scalar [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Equivalence class: $T967

  $T967:
    Constraints:
      $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T5 operator arg conv $T967 [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T0

  $T973:
    Constraints:
      $T973 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T973.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T973 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T967
  1: $T1 $T3 $T973
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T974, $T974) -> $T974)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T975, $T975) -> $T975)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T976>, Array<$T976>) -> Array<$T976>)
      ($T2 literal=3 involves_type_vars=[$T976] bindings={(subtypes of) Array<$T976>})
      ($T3 literal=3 involves_type_vars=[$T976] bindings={(subtypes of) Array<$T976>})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T976 hole potentially_incomplete involves_type_vars=[$T2 $T3] #defaultable_bindings=1 bindings={})
      Initial bindings: $T2 := Array<$T976>, $T2 := Int
      (attempting type variable $T2 := Array<$T976>
        (increasing score due to non-default literal)
        (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
      )
      (attempting type variable $T2 := Int
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        ($T3 literal=3 bindings={(subtypes of) Array<Int>})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := Array<Int>, $T3 := String
        (attempting type variable $T3 := Array<Int>
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T3 operator arg conv Array<$T976> [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];)
        )
        (attempting type variable $T3 := [$T977]
          (increasing score due to non-default literal)
          (solution is worse than the best solution)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T2 operator arg conv Array<$T976> [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T978, $T979) -> $T978)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T979] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T979 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T979] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T979 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T979 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T979 := String
          (attempting type variable $T979 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T979] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T979 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T979 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T979 := String
          (attempting type variable $T979 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T981, $T980) -> $T980)
      ($T2 literal=3 involves_type_vars=[$T981] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T981 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T981 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T981 := Int
        (attempting type variable $T981 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T981 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T981 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T981 := Double
        (attempting type variable $T981 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T981 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T982, $T983) -> $T982)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T983] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      ($T983 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T983] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T983 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T983 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T983 := String
          (attempting type variable $T983 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T983] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        ($T983 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          ($T983 potentially_incomplete bindings={(supertypes of) String})
          Initial bindings: $T983 := String
          (attempting type variable $T983 := String
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
            ($T5 literal=3 involves_type_vars=[$T6] bindings={})
            Initial bindings: $T5 := Int
            (attempting type variable $T5 := Int
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Int})
              Initial bindings: $T6 := Int
              (attempting type variable $T6 := Int
                (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
            (attempting type variable $T5 := Double
              (increasing score due to non-default literal)
              ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
              ($T6 bindings={(supertypes of) Double})
              Initial bindings: $T6 := Double
              (attempting type variable $T6 := Double
                (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
                (increasing score due to attempting to fix the source)
                (solution is worse than the best solution)
                (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
              )
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T984, $T984) -> $T984)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T985, $T985) -> $T985)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
          ($T5 literal=3 involves_type_vars=[$T6] bindings={})
          Initial bindings: $T5 := Int
          (attempting type variable $T5 := Int
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Int})
            Initial bindings: $T6 := Int
            (attempting type variable $T6 := Int
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
          (attempting type variable $T5 := Double
            (increasing score due to non-default literal)
            ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double; (supertypes of) String})
            ($T6 bindings={(supertypes of) Double})
            Initial bindings: $T6 := Double
            (attempting type variable $T6 := Double
              (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
              (increasing score due to attempting to fix the source)
              (solution is worse than the best solution)
              (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
            )
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T986, $T986.Scalar) -> $T986)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T987.Scalar, $T987) -> $T987)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) String})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T988, $T988.Scalar) -> $T988)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Int})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T5 := Int
        (attempting type variable $T5 := Int
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T5 := Double
          (increasing score due to non-default literal)
          ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
          ($T4 delayed involves_type_vars=[$T6] bindings={(supertypes of) Double})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T967 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      )
    )
  )
  (attempting disjunction choice $T0 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]]];
    (overload set choice binding $T0 := ($T989, $T989.Scalar) -> $T989)
    ($T2 delayed literal=3 bindings={})
    ($T3 delayed literal=3 bindings={})
    ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
    (attempting disjunction choice $T1 bound to decl Swift.(file).String extension.+ : (String.Type) -> (String, String) -> String [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (String, String) -> String)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) String})
        Initial bindings: $T6 := String
        (attempting type variable $T6 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int extension.+ : (Int.Type) -> (Int, Int) -> Int [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int, Int) -> Int)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Int [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Int [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int})
        Initial bindings: $T3 := Int, $T3 := String
        (attempting type variable $T3 := Int
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Int})
        Initial bindings: $T6 := Int
        (attempting type variable $T6 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float16 extension.+ : (Float16.Type) -> (Float16, Float16) -> Float16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float16, Float16) -> Float16)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float16})
        Initial bindings: $T3 := Float16, $T3 := String
        (attempting type variable $T3 := Float16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float16})
        Initial bindings: $T2 := Float16
        (attempting type variable $T2 := Float16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Float16})
        Initial bindings: $T6 := Float16
        (attempting type variable $T6 := Float16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Float extension.+ : (Float.Type) -> (Float, Float) -> Float [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Float, Float) -> Float)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Float [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Float [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Float})
        Initial bindings: $T3 := Float, $T3 := String
        (attempting type variable $T3 := Float
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Float})
        Initial bindings: $T2 := Float
        (attempting type variable $T2 := Float
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Float})
        Initial bindings: $T6 := Float
        (attempting type variable $T6 := Float
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Double extension.+ : (Double.Type) -> (Double, Double) -> Double [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Double, Double) -> Double)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv Double [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv Double [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Double})
        Initial bindings: $T3 := Double, $T3 := String
        (attempting type variable $T3 := Double
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Double})
        Initial bindings: $T2 := Double
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Double})
        Initial bindings: $T6 := Double
        (attempting type variable $T6 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt8 extension.+ : (UInt8.Type) -> (UInt8, UInt8) -> UInt8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt8, UInt8) -> UInt8)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];
      $T2 operator arg conv UInt8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T3:
    Constraints:
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];
      $T3 operator arg conv UInt8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt8})
        Initial bindings: $T3 := UInt8, $T3 := String
        (attempting type variable $T3 := UInt8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt8})
        Initial bindings: $T2 := UInt8
        (attempting type variable $T2 := UInt8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) UInt8})
        Initial bindings: $T6 := UInt8
        (attempting type variable $T6 := UInt8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int8 extension.+ : (Int8.Type) -> (Int8, Int8) -> Int8 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int8, Int8) -> Int8)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int8 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int8 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int8})
        Initial bindings: $T3 := Int8, $T3 := String
        (attempting type variable $T3 := Int8
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int8})
        Initial bindings: $T2 := Int8
        (attempting type variable $T2 := Int8
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Int8})
        Initial bindings: $T6 := Int8
        (attempting type variable $T6 := Int8
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt16 extension.+ : (UInt16.Type) -> (UInt16, UInt16) -> UInt16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt16, UInt16) -> UInt16)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt16})
        Initial bindings: $T3 := UInt16, $T3 := String
        (attempting type variable $T3 := UInt16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt16})
        Initial bindings: $T2 := UInt16
        (attempting type variable $T2 := UInt16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) UInt16})
        Initial bindings: $T6 := UInt16
        (attempting type variable $T6 := UInt16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int16 extension.+ : (Int16.Type) -> (Int16, Int16) -> Int16 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int16, Int16) -> Int16)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int16 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int16 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int16})
        Initial bindings: $T3 := Int16, $T3 := String
        (attempting type variable $T3 := Int16
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int16})
        Initial bindings: $T2 := Int16
        (attempting type variable $T2 := Int16
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Int16})
        Initial bindings: $T6 := Int16
        (attempting type variable $T6 := Int16
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt32 extension.+ : (UInt32.Type) -> (UInt32, UInt32) -> UInt32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt32, UInt32) -> UInt32)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt32})
        Initial bindings: $T3 := UInt32, $T3 := String
        (attempting type variable $T3 := UInt32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt32})
        Initial bindings: $T2 := UInt32
        (attempting type variable $T2 := UInt32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) UInt32})
        Initial bindings: $T6 := UInt32
        (attempting type variable $T6 := UInt32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int32 extension.+ : (Int32.Type) -> (Int32, Int32) -> Int32 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int32, Int32) -> Int32)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int32 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int32 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int32})
        Initial bindings: $T3 := Int32, $T3 := String
        (attempting type variable $T3 := Int32
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int32})
        Initial bindings: $T2 := Int32
        (attempting type variable $T2 := Int32
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Int32})
        Initial bindings: $T6 := Int32
        (attempting type variable $T6 := Int32
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt64 extension.+ : (UInt64.Type) -> (UInt64, UInt64) -> UInt64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt64, UInt64) -> UInt64)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt64})
        Initial bindings: $T3 := UInt64, $T3 := String
        (attempting type variable $T3 := UInt64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt64})
        Initial bindings: $T2 := UInt64
        (attempting type variable $T2 := UInt64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) UInt64})
        Initial bindings: $T6 := UInt64
        (attempting type variable $T6 := UInt64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Int64 extension.+ : (Int64.Type) -> (Int64, Int64) -> Int64 [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Int64, Int64) -> Int64)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv Int64 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv Int64 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) Int64})
        Initial bindings: $T3 := Int64, $T3 := String
        (attempting type variable $T3 := Int64
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) Int64})
        Initial bindings: $T2 := Int64
        (attempting type variable $T2 := Int64
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) Int64})
        Initial bindings: $T6 := Int64
        (attempting type variable $T6 := Int64
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).UInt extension.+ : (UInt.Type) -> (UInt, UInt) -> UInt [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (UInt, UInt) -> UInt)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:

  $T2:
    Constraints:
      $T2 operator arg conv UInt [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv UInt [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T2
  2: $T3
      (solving component #2
        ($T3 literal=3 bindings={(subtypes of) UInt})
        Initial bindings: $T3 := UInt, $T3 := String
        (attempting type variable $T3 := UInt
          (increasing score due to non-default literal)
          (failed constraint $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];)
        )
        (attempting type variable $T3 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1])
          (increasing score due to attempting to fix the source)
          (found solution 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 bindings={(subtypes of) UInt})
        Initial bindings: $T2 := UInt
        (attempting type variable $T2 := UInt
          (increasing score due to non-default literal)
          (found solution 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
        )
      finished component #1)
      (solving component #0
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T6 bindings={(supertypes of) UInt})
        Initial bindings: $T6 := UInt
        (attempting type variable $T6 := UInt
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      failed component #0)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T990, $T990.Scalar) -> $T990)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T990 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T990 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).AdditiveArithmetic.+ : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T991, $T991) -> $T991)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T991 conforms to AdditiveArithmetic [[locator@0x12609d000 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T991 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self, Self.Stride) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T992, $T992.Stride) -> $T992)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T992 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T992 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Strideable extension.+ : <Self where Self : _Pointer> (Self.Type) -> (Self.Stride, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T993.Stride, $T993) -> $T993)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T993 conforms to _Pointer [[locator@0x12609d468 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (Self, String) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T994, String) -> Never)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:
    References: $T994

  $T2:
    Constraints:
      $T2 operator arg conv $T994 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv String [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T994:
    Constraints:
      $T994 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T994.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T2 operator arg conv $T994 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T1 $T2 $T994
  2: $T3
      (solving component #2
        ($T3 bindings={(subtypes of) String})
        Initial bindings: $T3 := String
        (attempting type variable $T3 := String
          (found solution 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
        )
      finished component #2)
      (solving component #1
        ($T2 literal=3 involves_type_vars=[$T994] bindings={})
        ($T994 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
        Initial bindings: $T2 := Int
        (attempting type variable $T2 := Int
          ($T994 potentially_incomplete bindings={(supertypes of) Int})
          Initial bindings: $T994 := Int
          (attempting type variable $T994 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T994 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          ($T994 potentially_incomplete bindings={(supertypes of) Double})
          Initial bindings: $T994 := Double
          (attempting type variable $T994 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T994 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
      failed component #1)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Sequence extension.+ : <Self where Self : Sequence, Self.Element == String> (Self.Type) -> (String, Self) -> Never [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := (String, $T995) -> Never)
      ---Constraint graph---
  $T0:
    References: $T989

  $T1:
    References: $T995

  $T2:
    Constraints:
      $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];
      $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];

  $T3:
    Constraints:
      $T3 operator arg conv $T995 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
      $T3 literal conforms to ExpressibleByUnicodeScalarLiteral [[locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]]];

  $T4:
    Constraints:
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];

  $T5:
    Constraints:
      $T5 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];

  $T6:
    Constraints:
      $T6.Scalar conforms to FloatingPoint [[locator@0x1268a8488 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #1 (conformance)]]];
      $T5 operator arg conv $T6.Scalar [[locator@0x1258f2eb0 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Equivalence class: $T989

  $T989:
    Constraints:
      $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T4 operator arg conv $T989 [[locator@0x1258f2e10 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument -> comparing call argument #0 to parameter #0]]];
    Referenced By: $T0

  $T995:
    Constraints:
      $T995 conforms to Sequence [[locator@0x1268b6e68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];
      $T995.Element bind String [[locator@0x1268b6f28 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (same-type)]]];
      $T3 operator arg conv $T995 [[locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]]];
    Referenced By: $T1

---Connected components---
  0: $T0 $T4 $T5 $T6 $T989
  1: $T1 $T3 $T995
  2: $T2
      (solving component #2
        ($T2 literal=3 bindings={(subtypes of) String})
        Initial bindings: $T2 := String, $T2 := Int
        (attempting type variable $T2 := String
          (increasing score due to non-default literal)
          (failed constraint $T2 literal conforms to ExpressibleByIntegerLiteral [[locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]]];)
        )
        (attempting type variable $T2 := Int
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
        (attempting type variable $T2 := Double
          (increasing score due to non-default literal)
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv String [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      failed component #2)
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).FloatingPoint.+ : <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T996, $T996) -> $T996)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T996 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T996 conforms to FloatingPoint [[locator@0x12609ddf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          ($T3 literal=3 bindings={(subtypes of) Double})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Double})
          Initial bindings: $T6 := Double
          (attempting type variable $T6 := Double
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T996 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).BinaryInteger.+ : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T997, $T997) -> $T997)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          ($T3 literal=3 bindings={(subtypes of) Int})
          ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
          ($T6 bindings={(supertypes of) Int})
          Initial bindings: $T6 := Int
          (attempting type variable $T6 := Int
            (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
            (increasing score due to attempting to fix the source)
            (solution is worse than the best solution)
            (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
          )
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T997 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T3 $T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T997 conforms to BinaryInteger [[locator@0x12682ba38 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T997 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).Array extension.+ : <Element> (Array<Element>.Type) -> (Array<Element>, Array<Element>) -> Array<Element> [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := (Array<$T998>, Array<$T998>) -> Array<$T998>)
      ($T2 literal=3 involves_type_vars=[$T998] bindings={(subtypes of) Array<$T998>})
      ($T3 literal=3 involves_type_vars=[$T998] bindings={(subtypes of) Array<$T998>})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T6 involves_type_vars=[$T998] bindings={(supertypes of) Array<$T998>})
      ($T998 hole potentially_incomplete involves_type_vars=[$T2 $T6 $T3] #defaultable_bindings=1 bindings={})
      Initial bindings: $T6 := Array<$T998>
      (attempting type variable $T6 := Array<$T998>
        (attempting fix [fix: add missing protocol conformance] @ locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)])
        (increasing score due to attempting to fix the source)
        (solution is worse than the best solution)
        (failed constraint $T989 conforms to SIMD [[locator@0x1268a8378 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> opened generic -> type parameter requirement #0 (conformance)]]];)
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T999, $T1000) -> $T999)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T1000] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T1000 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T1000] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T1000 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T999 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T1000] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T1000 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T999 conforms to RangeReplaceableCollection [[locator@0x12682c198 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : Sequence, Self.Element == Other.Element> (Self.Type) -> (Other, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T1002, $T1001) -> $T1001)
      ($T2 literal=3 involves_type_vars=[$T1002] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T1002 potentially_incomplete literal=3 involves_type_vars=[$T2] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T1002 potentially_incomplete bindings={(supertypes of) Int})
        Initial bindings: $T1002 := Int
        (attempting type variable $T1002 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1002 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T1002 potentially_incomplete bindings={(supertypes of) Double})
        Initial bindings: $T1002 := Double
        (attempting type variable $T1002 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1002 conforms to Sequence [[locator@0x12682c8f8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #1 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).RangeReplaceableCollection extension.+ : <Self, Other where Self : RangeReplaceableCollection, Other : RangeReplaceableCollection, Self.Element == Other.Element> (Self.Type) -> (Self, Other) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T1003, $T1004) -> $T1003)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T1004] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      ($T1004 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T1004] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T1004 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1003 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T1004] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        ($T1004 potentially_incomplete literal=3 involves_type_vars=[$T3] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1003 conforms to RangeReplaceableCollection [[locator@0x12682cf68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T1005, $T1005) -> $T1005)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1005 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1005 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1005 conforms to SIMD [[locator@0x12682d5d8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T1005 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T1006, $T1006) -> $T1006)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int, $T4 := String
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1006 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T1006 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 literal=3 involves_type_vars=[$T6 $T3] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double, $T4 := String
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1006 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
        (attempting type variable $T4 := String
          (attempting fix [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T2 operator arg conv $T1006 [[locator@0x1258f2fa0 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #0 to parameter #0]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self, Self.Scalar) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T1007, $T1007.Scalar) -> $T1007)
      ($T2 literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T2 := Int
      (attempting type variable $T2 := Int
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Int})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Int
        (attempting type variable $T4 := Int
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1007 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
      (attempting type variable $T2 := Double
        (increasing score due to non-default literal)
        ($T3 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) Double})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := Double
        (attempting type variable $T4 := Double
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1007 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FixedWidthInteger> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (increasing score due to use of an unavailable declaration)
      (overload set choice binding $T1 := ($T1008.Scalar, $T1008) -> $T1008)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1008 conforms to SIMD [[locator@0x1268c4c58 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
    (attempting disjunction choice $T1 bound to decl Swift.(file).SIMD extension.+ : <Self where Self : SIMD, Self.Scalar : FloatingPoint> (Self.Type) -> (Self.Scalar, Self) -> Self [[locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]]];
      (overload set choice binding $T1 := ($T1009.Scalar, $T1009) -> $T1009)
      ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
      ($T3 literal=3 involves_type_vars=[$T4] bindings={})
      ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
      Initial bindings: $T3 := String
      (attempting type variable $T3 := String
        ($T2 delayed literal=3 involves_type_vars=[$T4] bindings={})
        ($T4 involves_type_vars=[$T6] bindings={(supertypes of) String})
        ($T5 delayed literal=3 involves_type_vars=[$T6] bindings={})
        Initial bindings: $T4 := String
        (attempting type variable $T4 := String
          (attempting fix [fix: add missing protocol conformance] @ locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)])
          (increasing score due to attempting to fix the source)
          (solution is worse than the best solution)
          (failed constraint $T1009 conforms to SIMD [[locator@0x12682df68 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> opened generic -> type parameter requirement #0 (conformance)]]];)
        )
      )
    )
  )
--- Ambiguity: Considering #7 solutions with fixes ---
--- Solution #0---
Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as Int @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T0 as (Int, Int) -> Int @ locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]
  $T5 as Int @ locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]
  $T6 as Int @ locator@0x1258f2c80 [Binary@/Users/amritpankaur/test.swift:55:9 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (Int, Int) -> Int @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).Int extension.+ as +: (Int, Int) -> Int

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).Int extension.+ as +: (Int, Int) -> Int


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]

--- Solution #1---
Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as Int @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T677 as Int @ locator@0x126881af8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> generic parameter 'Self']
  $T0 as (Int, Int) -> Int @ locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]
  $T5 as Int @ locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]
  $T6 as Int @ locator@0x1258f2c80 [Binary@/Users/amritpankaur/test.swift:55:9 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (Int, Int) -> Int @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).AdditiveArithmetic.+ as +: ($T677, $T677) -> $T677

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).Int extension.+ as +: (Int, Int) -> Int


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Opened types:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] opens τ_0_0 -> $T677

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]

--- Solution #2---
Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as Int @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T677 as Int @ locator@0x126881af8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> generic parameter 'Self']
  $T678 as Int @ locator@0x1258f3b70 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> generic parameter 'Self']
  $T0 as (Int, Int) -> Int @ locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]
  $T5 as Int @ locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]
  $T6 as Int @ locator@0x1258f2c80 [Binary@/Users/amritpankaur/test.swift:55:9 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (Int, Int) -> Int @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).AdditiveArithmetic.+ as +: ($T677, $T677) -> $T677

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).AdditiveArithmetic.+ as +: ($T678, $T678) -> $T678


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Opened types:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] opens τ_0_0 -> $T677
  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] opens τ_0_0 -> $T678

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]

--- Solution #3---
Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as Int @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T677 as Int @ locator@0x126881af8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> generic parameter 'Self']
  $T0 as (Int, Int) -> Int @ locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]
  $T5 as Int @ locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]
  $T6 as Int @ locator@0x1258f2c80 [Binary@/Users/amritpankaur/test.swift:55:9 -> function result]
  $T684 as Int @ locator@0x12682b9b0 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> generic parameter 'Self']
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (Int, Int) -> Int @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).AdditiveArithmetic.+ as +: ($T677, $T677) -> $T677

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).BinaryInteger.+ as +: ($T684, $T684) -> $T684


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Opened types:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] opens τ_0_0 -> $T677
  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] opens τ_0_0 -> $T684

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]

--- Solution #4---
Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as Int @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T766 as Int @ locator@0x13981daf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> generic parameter 'Self']
  $T0 as (Int, Int) -> Int @ locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]
  $T5 as Int @ locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]
  $T6 as Int @ locator@0x1258f2c80 [Binary@/Users/amritpankaur/test.swift:55:9 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (Int, Int) -> Int @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).BinaryInteger.+ as +: ($T766, $T766) -> $T766

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).Int extension.+ as +: (Int, Int) -> Int


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Opened types:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] opens τ_0_0 -> $T766

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]

--- Solution #5---
Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as Int @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T766 as Int @ locator@0x13981daf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> generic parameter 'Self']
  $T0 as (Int, Int) -> Int @ locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]
  $T5 as Int @ locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]
  $T6 as Int @ locator@0x1258f2c80 [Binary@/Users/amritpankaur/test.swift:55:9 -> function result]
  $T767 as Int @ locator@0x1258f3b70 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> generic parameter 'Self']
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (Int, Int) -> Int @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).BinaryInteger.+ as +: ($T766, $T766) -> $T766

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).AdditiveArithmetic.+ as +: ($T767, $T767) -> $T767


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Opened types:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] opens τ_0_0 -> $T766
  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] opens τ_0_0 -> $T767

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]

--- Solution #6---
Fixed score: 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Type variables:
  $T4 as Int @ locator@0x1258f0c40 [Binary@/Users/amritpankaur/test.swift:55:3 -> function result]
  $T766 as Int @ locator@0x13981daf8 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9 -> generic parameter 'Self']
  $T0 as (Int, Int) -> Int @ locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9]
  $T5 as Int @ locator@0x1258f0da8 [IntegerLiteral@/Users/amritpankaur/test.swift:55:11]
  $T6 as Int @ locator@0x1258f2c80 [Binary@/Users/amritpankaur/test.swift:55:9 -> function result]
  $T2 as Int @ locator@0x1258f0ac0 [IntegerLiteral@/Users/amritpankaur/test.swift:55:1]
  $T772 as Int @ locator@0x12682b9b0 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3 -> generic parameter 'Self']
  $T3 as String @ locator@0x1258f0b78 [StringLiteral@/Users/amritpankaur/test.swift:55:5]
  $T1 as (Int, Int) -> Int @ locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3]

Overload choices:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] with Swift.(file).BinaryInteger.+ as +: ($T766, $T766) -> $T766

  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] with Swift.(file).BinaryInteger.+ as +: ($T772, $T772) -> $T772


Constraint restrictions:

Trailing closure matching:
  locator@0x1258f2de8 [Binary@/Users/amritpankaur/test.swift:55:9 -> apply argument]: forward
  locator@0x1258f2f78 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument]: forward

Disjunction choices:

Opened types:
  locator@0x1258ee200 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:9] opens τ_0_0 -> $T766
  locator@0x1258ef048 [OverloadedDeclRef@/Users/amritpankaur/test.swift:55:3] opens τ_0_0 -> $T772

Fixes:
  [fix: allow argument to parameter type conversion mismatch] @ locator@0x1258f3040 [Binary@/Users/amritpankaur/test.swift:55:3 -> apply argument -> comparing call argument #1 to parameter #1]

(failed constraint String conv Int [[locator@0x12692b600 []]];)
(increasing score due to user conversion)
(failed constraint String bridging conv Int [[locator@0x12692b600 []]];)
/Users/amritpankaur/test.swift:55:5: error: cannot convert value of type 'String' to expected argument type 'Int'
1 + "a" + 2
    ^
Program ended with exit code: 1
